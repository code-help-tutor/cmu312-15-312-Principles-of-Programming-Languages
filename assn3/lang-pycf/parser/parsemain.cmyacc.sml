(* File generated by CM-Yacc version 2.1 *)

functor ParseMain
  (structure Streamable: STREAMABLE
   structure Arg:
   sig
     type string
     type int
     type bool
     type class
     type objectseq
     type object
     type declseq
     type decl
     type prog

     val prog_mk: declseq * object -> prog
     val prog_id: object -> prog
     val decl_def: string * string * declseq * object -> decl
     val decl_assign: string * object -> decl
     val declseq_cons: decl * declseq -> declseq
     val declseq_nil: unit -> declseq
     val object_lam: string * object -> object
     val object_if: object * object * object -> object
     val object_leq: object * object -> object
     val object_plus: object * object -> object
     val object_ap: object * object -> object
     val object_index: object * object -> object
     val object_isinstance: object * class -> object
     val object_len: object -> object
     val object_cons: object * objectseq -> object
     val object_nil: unit -> object
     val object_bool: bool -> object
     val object_int: int -> object
     val object_var: string -> object
     val object_id: object -> object
     val objectseq_cons: object * objectseq -> objectseq
     val objectseq_nil: unit -> objectseq
     val class_fun: unit -> class
     val class_list: unit -> class
     val class_int: unit -> class
     val class_bool: unit -> class

     datatype terminal =
       IDENT of string
     | NUMBER of int
     | BOOLCONST of bool
     | LBRACKET
     | RBRACKET
     | LPAREN
     | RPAREN
     | COLON
     | COMMA
     | EQUAL
     | PLUS
     | LEQ
     | SEMICOLON
     | DEF
     | ISINSTANCE
     | LEN
     | IF
     | ELSE
     | LAMBDA
     | RETURN
     | IFNAME
     | PRINT
     | BOOL
     | INT
     | LIST
     | FUN

     val error: terminal Streamable.t -> exn
   end) :>
sig
  val parse: Arg.terminal Streamable.t -> Arg.prog * Arg.terminal Streamable.t
end =

(*

AUTOMATON LISTING
=================

State 0:

start -> . Prog  / 0
7 : ObjectAtom -> . LPAREN Object RPAREN  / 1
8 : ObjectAtom -> . IDENT  / 1
9 : ObjectAtom -> . NUMBER  / 1
10 : ObjectAtom -> . BOOLCONST  / 1
11 : ObjectAtom -> . LBRACKET RBRACKET  / 1
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 1
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 1
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 1
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 1
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 1
17 : ObjectPlus -> . ObjectAtom  / 2
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 2
19 : ObjectLeq -> . ObjectPlus  / 3
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 3
21 : ObjectIf -> . ObjectLeq  / 0
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 0
23 : Object -> . ObjectIf  / 0
24 : Object -> . LAMBDA IDENT COLON Object  / 0
25 : Declseq -> .  / 4
26 : Declseq -> . Decl Declseq  / 4
27 : Decl -> . IDENT EQUAL Object  / 5
28 : Decl -> . DEF IDENT LPAREN IDENT RPAREN COLON Declseq RETURN Object  / 5
29 : Prog -> . Object  / 0
30 : Prog -> . Declseq IFNAME PRINT LPAREN Object RPAREN  / 0

IDENT => shift 7
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
DEF => shift 5
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
IFNAME => reduce 25
Object => goto 4
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2
Declseq => goto 1
Decl => goto 16
Prog => goto 17

-----

State 1:

30 : Prog -> Declseq . IFNAME PRINT LPAREN Object RPAREN  / 0

IFNAME => shift 18

-----

State 2:

23 : Object -> ObjectIf .  / 6

$ => reduce 23
IDENT => reduce 23
RBRACKET => reduce 23
RPAREN => reduce 23
COMMA => reduce 23
DEF => reduce 23
ELSE => reduce 23
RETURN => reduce 23
IFNAME => reduce 23

-----

State 3:

15 : ObjectAtom -> ObjectAtom . LBRACKET Object RBRACKET  / 7
16 : ObjectAtom -> ObjectAtom . LPAREN Object RPAREN  / 7
17 : ObjectPlus -> ObjectAtom .  / 8

$ => reduce 17
IDENT => reduce 17
LBRACKET => shift 20
RBRACKET => reduce 17
LPAREN => shift 19
RPAREN => reduce 17
COMMA => reduce 17
PLUS => reduce 17
LEQ => reduce 17
DEF => reduce 17
IF => reduce 17
ELSE => reduce 17
RETURN => reduce 17
IFNAME => reduce 17

-----

State 4:

29 : Prog -> Object .  / 0

$ => reduce 29

-----

State 5:

28 : Decl -> DEF . IDENT LPAREN IDENT RPAREN COLON Declseq RETURN Object  / 9

IDENT => shift 21

-----

State 6:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 10
7 : ObjectAtom -> LPAREN . Object RPAREN  / 7
8 : ObjectAtom -> . IDENT  / 10
9 : ObjectAtom -> . NUMBER  / 10
10 : ObjectAtom -> . BOOLCONST  / 10
11 : ObjectAtom -> . LBRACKET RBRACKET  / 10
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 10
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 10
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 10
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 10
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 10
17 : ObjectPlus -> . ObjectAtom  / 11
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 11
19 : ObjectLeq -> . ObjectPlus  / 12
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 12
21 : ObjectIf -> . ObjectLeq  / 13
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 13
23 : Object -> . ObjectIf  / 13
24 : Object -> . LAMBDA IDENT COLON Object  / 13

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 23
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 7:

8 : ObjectAtom -> IDENT .  / 1
27 : Decl -> IDENT . EQUAL Object  / 5

$ => reduce 8
LBRACKET => reduce 8
LPAREN => reduce 8
EQUAL => shift 24
PLUS => reduce 8
LEQ => reduce 8
IF => reduce 8

-----

State 8:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 14
8 : ObjectAtom -> . IDENT  / 14
9 : ObjectAtom -> . NUMBER  / 14
10 : ObjectAtom -> . BOOLCONST  / 14
11 : ObjectAtom -> . LBRACKET RBRACKET  / 14
11 : ObjectAtom -> LBRACKET . RBRACKET  / 7
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 14
12 : ObjectAtom -> LBRACKET . Object Objectseq RBRACKET  / 7
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 14
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 14
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 14
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 14
17 : ObjectPlus -> . ObjectAtom  / 15
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 15
19 : ObjectLeq -> . ObjectPlus  / 16
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 16
21 : ObjectIf -> . ObjectLeq  / 17
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 17
23 : Object -> . ObjectIf  / 17
24 : Object -> . LAMBDA IDENT COLON Object  / 17

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
RBRACKET => shift 25
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 26
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 9:

9 : ObjectAtom -> NUMBER .  / 7

$ => reduce 9
IDENT => reduce 9
LBRACKET => reduce 9
RBRACKET => reduce 9
LPAREN => reduce 9
RPAREN => reduce 9
COMMA => reduce 9
PLUS => reduce 9
LEQ => reduce 9
DEF => reduce 9
IF => reduce 9
ELSE => reduce 9
RETURN => reduce 9
IFNAME => reduce 9

-----

State 10:

10 : ObjectAtom -> BOOLCONST .  / 7

$ => reduce 10
IDENT => reduce 10
LBRACKET => reduce 10
RBRACKET => reduce 10
LPAREN => reduce 10
RPAREN => reduce 10
COMMA => reduce 10
PLUS => reduce 10
LEQ => reduce 10
DEF => reduce 10
IF => reduce 10
ELSE => reduce 10
RETURN => reduce 10
IFNAME => reduce 10

-----

State 11:

24 : Object -> LAMBDA . IDENT COLON Object  / 6

IDENT => shift 27

-----

State 12:

14 : ObjectAtom -> ISINSTANCE . LPAREN Object COMMA Class RPAREN  / 7

LPAREN => shift 28

-----

State 13:

13 : ObjectAtom -> LEN . LPAREN Object RPAREN  / 7

LPAREN => shift 29

-----

State 14:

21 : ObjectIf -> ObjectLeq .  / 6
22 : ObjectIf -> ObjectLeq . IF Object ELSE Object  / 6

$ => reduce 21
IDENT => reduce 21
RBRACKET => reduce 21
RPAREN => reduce 21
COMMA => reduce 21
DEF => reduce 21
IF => shift 30
ELSE => reduce 21
RETURN => reduce 21
IFNAME => reduce 21

-----

State 15:

18 : ObjectPlus -> ObjectPlus . PLUS ObjectAtom  / 8
19 : ObjectLeq -> ObjectPlus .  / 18
20 : ObjectLeq -> ObjectPlus . LEQ ObjectPlus  / 18

$ => reduce 19
IDENT => reduce 19
RBRACKET => reduce 19
RPAREN => reduce 19
COMMA => reduce 19
PLUS => shift 32
LEQ => shift 31
DEF => reduce 19
IF => reduce 19
ELSE => reduce 19
RETURN => reduce 19
IFNAME => reduce 19

-----

State 16:

25 : Declseq -> .  / 19
26 : Declseq -> . Decl Declseq  / 19
26 : Declseq -> Decl . Declseq  / 19
27 : Decl -> . IDENT EQUAL Object  / 9
28 : Decl -> . DEF IDENT LPAREN IDENT RPAREN COLON Declseq RETURN Object  / 9

IDENT => shift 33
DEF => shift 5
RETURN => reduce 25
IFNAME => reduce 25
Declseq => goto 34
Decl => goto 16

-----

State 17:

start -> Prog .  / 0

$ => accept

-----

State 18:

30 : Prog -> Declseq IFNAME . PRINT LPAREN Object RPAREN  / 0

PRINT => shift 35

-----

State 19:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 10
8 : ObjectAtom -> . IDENT  / 10
9 : ObjectAtom -> . NUMBER  / 10
10 : ObjectAtom -> . BOOLCONST  / 10
11 : ObjectAtom -> . LBRACKET RBRACKET  / 10
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 10
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 10
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 10
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 10
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 10
16 : ObjectAtom -> ObjectAtom LPAREN . Object RPAREN  / 7
17 : ObjectPlus -> . ObjectAtom  / 11
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 11
19 : ObjectLeq -> . ObjectPlus  / 12
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 12
21 : ObjectIf -> . ObjectLeq  / 13
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 13
23 : Object -> . ObjectIf  / 13
24 : Object -> . LAMBDA IDENT COLON Object  / 13

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 36
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 20:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 20
8 : ObjectAtom -> . IDENT  / 20
9 : ObjectAtom -> . NUMBER  / 20
10 : ObjectAtom -> . BOOLCONST  / 20
11 : ObjectAtom -> . LBRACKET RBRACKET  / 20
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 20
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 20
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 20
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 20
15 : ObjectAtom -> ObjectAtom LBRACKET . Object RBRACKET  / 7
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 20
17 : ObjectPlus -> . ObjectAtom  / 21
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 21
19 : ObjectLeq -> . ObjectPlus  / 22
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 22
21 : ObjectIf -> . ObjectLeq  / 23
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 23
23 : Object -> . ObjectIf  / 23
24 : Object -> . LAMBDA IDENT COLON Object  / 23

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 37
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 21:

28 : Decl -> DEF IDENT . LPAREN IDENT RPAREN COLON Declseq RETURN Object  / 9

LPAREN => shift 38

-----

State 22:

8 : ObjectAtom -> IDENT .  / 7

$ => reduce 8
IDENT => reduce 8
LBRACKET => reduce 8
RBRACKET => reduce 8
LPAREN => reduce 8
RPAREN => reduce 8
COMMA => reduce 8
PLUS => reduce 8
LEQ => reduce 8
DEF => reduce 8
IF => reduce 8
ELSE => reduce 8
RETURN => reduce 8
IFNAME => reduce 8

-----

State 23:

7 : ObjectAtom -> LPAREN Object . RPAREN  / 7

RPAREN => shift 39

-----

State 24:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 24
8 : ObjectAtom -> . IDENT  / 24
9 : ObjectAtom -> . NUMBER  / 24
10 : ObjectAtom -> . BOOLCONST  / 24
11 : ObjectAtom -> . LBRACKET RBRACKET  / 24
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 24
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 24
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 24
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 24
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 24
17 : ObjectPlus -> . ObjectAtom  / 25
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 25
19 : ObjectLeq -> . ObjectPlus  / 26
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 26
21 : ObjectIf -> . ObjectLeq  / 9
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 9
23 : Object -> . ObjectIf  / 9
24 : Object -> . LAMBDA IDENT COLON Object  / 9
27 : Decl -> IDENT EQUAL . Object  / 9

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 40
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 25:

11 : ObjectAtom -> LBRACKET RBRACKET .  / 7

$ => reduce 11
IDENT => reduce 11
LBRACKET => reduce 11
RBRACKET => reduce 11
LPAREN => reduce 11
RPAREN => reduce 11
COMMA => reduce 11
PLUS => reduce 11
LEQ => reduce 11
DEF => reduce 11
IF => reduce 11
ELSE => reduce 11
RETURN => reduce 11
IFNAME => reduce 11

-----

State 26:

4 : Objectseq -> .  / 23
5 : Objectseq -> . COMMA  / 23
6 : Objectseq -> . COMMA Object Objectseq  / 23
12 : ObjectAtom -> LBRACKET Object . Objectseq RBRACKET  / 7

RBRACKET => reduce 4
COMMA => shift 42
Objectseq => goto 41

-----

State 27:

24 : Object -> LAMBDA IDENT . COLON Object  / 6

COLON => shift 43

-----

State 28:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 27
8 : ObjectAtom -> . IDENT  / 27
9 : ObjectAtom -> . NUMBER  / 27
10 : ObjectAtom -> . BOOLCONST  / 27
11 : ObjectAtom -> . LBRACKET RBRACKET  / 27
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 27
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 27
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 27
14 : ObjectAtom -> ISINSTANCE LPAREN . Object COMMA Class RPAREN  / 7
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 27
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 27
17 : ObjectPlus -> . ObjectAtom  / 28
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 28
19 : ObjectLeq -> . ObjectPlus  / 29
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 29
21 : ObjectIf -> . ObjectLeq  / 30
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 30
23 : Object -> . ObjectIf  / 30
24 : Object -> . LAMBDA IDENT COLON Object  / 30

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 44
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 29:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 10
8 : ObjectAtom -> . IDENT  / 10
9 : ObjectAtom -> . NUMBER  / 10
10 : ObjectAtom -> . BOOLCONST  / 10
11 : ObjectAtom -> . LBRACKET RBRACKET  / 10
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 10
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 10
13 : ObjectAtom -> LEN LPAREN . Object RPAREN  / 7
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 10
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 10
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 10
17 : ObjectPlus -> . ObjectAtom  / 11
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 11
19 : ObjectLeq -> . ObjectPlus  / 12
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 12
21 : ObjectIf -> . ObjectLeq  / 13
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 13
23 : Object -> . ObjectIf  / 13
24 : Object -> . LAMBDA IDENT COLON Object  / 13

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 45
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 30:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 31
8 : ObjectAtom -> . IDENT  / 31
9 : ObjectAtom -> . NUMBER  / 31
10 : ObjectAtom -> . BOOLCONST  / 31
11 : ObjectAtom -> . LBRACKET RBRACKET  / 31
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 31
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 31
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 31
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 31
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 31
17 : ObjectPlus -> . ObjectAtom  / 32
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 32
19 : ObjectLeq -> . ObjectPlus  / 33
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 33
21 : ObjectIf -> . ObjectLeq  / 34
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 34
22 : ObjectIf -> ObjectLeq IF . Object ELSE Object  / 6
23 : Object -> . ObjectIf  / 34
24 : Object -> . LAMBDA IDENT COLON Object  / 34

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 46
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 31:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 35
8 : ObjectAtom -> . IDENT  / 35
9 : ObjectAtom -> . NUMBER  / 35
10 : ObjectAtom -> . BOOLCONST  / 35
11 : ObjectAtom -> . LBRACKET RBRACKET  / 35
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 35
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 35
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 35
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 35
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 35
17 : ObjectPlus -> . ObjectAtom  / 36
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 36
20 : ObjectLeq -> ObjectPlus LEQ . ObjectPlus  / 18

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
ObjectAtom => goto 3
ObjectPlus => goto 47

-----

State 32:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 7
8 : ObjectAtom -> . IDENT  / 7
9 : ObjectAtom -> . NUMBER  / 7
10 : ObjectAtom -> . BOOLCONST  / 7
11 : ObjectAtom -> . LBRACKET RBRACKET  / 7
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 7
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 7
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 7
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 7
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 7
18 : ObjectPlus -> ObjectPlus PLUS . ObjectAtom  / 8

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
ObjectAtom => goto 48

-----

State 33:

27 : Decl -> IDENT . EQUAL Object  / 9

EQUAL => shift 24

-----

State 34:

26 : Declseq -> Decl Declseq .  / 19

RETURN => reduce 26
IFNAME => reduce 26

-----

State 35:

30 : Prog -> Declseq IFNAME PRINT . LPAREN Object RPAREN  / 0

LPAREN => shift 49

-----

State 36:

16 : ObjectAtom -> ObjectAtom LPAREN Object . RPAREN  / 7

RPAREN => shift 50

-----

State 37:

15 : ObjectAtom -> ObjectAtom LBRACKET Object . RBRACKET  / 7

RBRACKET => shift 51

-----

State 38:

28 : Decl -> DEF IDENT LPAREN . IDENT RPAREN COLON Declseq RETURN Object  / 9

IDENT => shift 52

-----

State 39:

7 : ObjectAtom -> LPAREN Object RPAREN .  / 7

$ => reduce 7
IDENT => reduce 7
LBRACKET => reduce 7
RBRACKET => reduce 7
LPAREN => reduce 7
RPAREN => reduce 7
COMMA => reduce 7
PLUS => reduce 7
LEQ => reduce 7
DEF => reduce 7
IF => reduce 7
ELSE => reduce 7
RETURN => reduce 7
IFNAME => reduce 7

-----

State 40:

27 : Decl -> IDENT EQUAL Object .  / 9

IDENT => reduce 27
DEF => reduce 27
RETURN => reduce 27
IFNAME => reduce 27

-----

State 41:

12 : ObjectAtom -> LBRACKET Object Objectseq . RBRACKET  / 7

RBRACKET => shift 53

-----

State 42:

5 : Objectseq -> COMMA .  / 23
6 : Objectseq -> COMMA . Object Objectseq  / 23
7 : ObjectAtom -> . LPAREN Object RPAREN  / 14
8 : ObjectAtom -> . IDENT  / 14
9 : ObjectAtom -> . NUMBER  / 14
10 : ObjectAtom -> . BOOLCONST  / 14
11 : ObjectAtom -> . LBRACKET RBRACKET  / 14
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 14
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 14
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 14
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 14
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 14
17 : ObjectPlus -> . ObjectAtom  / 15
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 15
19 : ObjectLeq -> . ObjectPlus  / 16
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 16
21 : ObjectIf -> . ObjectLeq  / 17
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 17
23 : Object -> . ObjectIf  / 17
24 : Object -> . LAMBDA IDENT COLON Object  / 17

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
RBRACKET => reduce 5
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 54
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 43:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 7
8 : ObjectAtom -> . IDENT  / 7
9 : ObjectAtom -> . NUMBER  / 7
10 : ObjectAtom -> . BOOLCONST  / 7
11 : ObjectAtom -> . LBRACKET RBRACKET  / 7
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 7
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 7
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 7
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 7
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 7
17 : ObjectPlus -> . ObjectAtom  / 8
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 8
19 : ObjectLeq -> . ObjectPlus  / 18
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 18
21 : ObjectIf -> . ObjectLeq  / 6
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 6
23 : Object -> . ObjectIf  / 6
24 : Object -> . LAMBDA IDENT COLON Object  / 6
24 : Object -> LAMBDA IDENT COLON . Object  / 6

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 55
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 44:

14 : ObjectAtom -> ISINSTANCE LPAREN Object . COMMA Class RPAREN  / 7

COMMA => shift 56

-----

State 45:

13 : ObjectAtom -> LEN LPAREN Object . RPAREN  / 7

RPAREN => shift 57

-----

State 46:

22 : ObjectIf -> ObjectLeq IF Object . ELSE Object  / 6

ELSE => shift 58

-----

State 47:

18 : ObjectPlus -> ObjectPlus . PLUS ObjectAtom  / 36
20 : ObjectLeq -> ObjectPlus LEQ ObjectPlus .  / 18

$ => reduce 20
IDENT => reduce 20
RBRACKET => reduce 20
RPAREN => reduce 20
COMMA => reduce 20
PLUS => shift 32
DEF => reduce 20
IF => reduce 20
ELSE => reduce 20
RETURN => reduce 20
IFNAME => reduce 20

-----

State 48:

15 : ObjectAtom -> ObjectAtom . LBRACKET Object RBRACKET  / 7
16 : ObjectAtom -> ObjectAtom . LPAREN Object RPAREN  / 7
18 : ObjectPlus -> ObjectPlus PLUS ObjectAtom .  / 8

$ => reduce 18
IDENT => reduce 18
LBRACKET => shift 20
RBRACKET => reduce 18
LPAREN => shift 19
RPAREN => reduce 18
COMMA => reduce 18
PLUS => reduce 18
LEQ => reduce 18
DEF => reduce 18
IF => reduce 18
ELSE => reduce 18
RETURN => reduce 18
IFNAME => reduce 18

-----

State 49:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 10
8 : ObjectAtom -> . IDENT  / 10
9 : ObjectAtom -> . NUMBER  / 10
10 : ObjectAtom -> . BOOLCONST  / 10
11 : ObjectAtom -> . LBRACKET RBRACKET  / 10
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 10
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 10
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 10
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 10
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 10
17 : ObjectPlus -> . ObjectAtom  / 11
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 11
19 : ObjectLeq -> . ObjectPlus  / 12
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 12
21 : ObjectIf -> . ObjectLeq  / 13
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 13
23 : Object -> . ObjectIf  / 13
24 : Object -> . LAMBDA IDENT COLON Object  / 13
30 : Prog -> Declseq IFNAME PRINT LPAREN . Object RPAREN  / 0

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 59
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 50:

16 : ObjectAtom -> ObjectAtom LPAREN Object RPAREN .  / 7

$ => reduce 16
IDENT => reduce 16
LBRACKET => reduce 16
RBRACKET => reduce 16
LPAREN => reduce 16
RPAREN => reduce 16
COMMA => reduce 16
PLUS => reduce 16
LEQ => reduce 16
DEF => reduce 16
IF => reduce 16
ELSE => reduce 16
RETURN => reduce 16
IFNAME => reduce 16

-----

State 51:

15 : ObjectAtom -> ObjectAtom LBRACKET Object RBRACKET .  / 7

$ => reduce 15
IDENT => reduce 15
LBRACKET => reduce 15
RBRACKET => reduce 15
LPAREN => reduce 15
RPAREN => reduce 15
COMMA => reduce 15
PLUS => reduce 15
LEQ => reduce 15
DEF => reduce 15
IF => reduce 15
ELSE => reduce 15
RETURN => reduce 15
IFNAME => reduce 15

-----

State 52:

28 : Decl -> DEF IDENT LPAREN IDENT . RPAREN COLON Declseq RETURN Object  / 9

RPAREN => shift 60

-----

State 53:

12 : ObjectAtom -> LBRACKET Object Objectseq RBRACKET .  / 7

$ => reduce 12
IDENT => reduce 12
LBRACKET => reduce 12
RBRACKET => reduce 12
LPAREN => reduce 12
RPAREN => reduce 12
COMMA => reduce 12
PLUS => reduce 12
LEQ => reduce 12
DEF => reduce 12
IF => reduce 12
ELSE => reduce 12
RETURN => reduce 12
IFNAME => reduce 12

-----

State 54:

4 : Objectseq -> .  / 23
5 : Objectseq -> . COMMA  / 23
6 : Objectseq -> . COMMA Object Objectseq  / 23
6 : Objectseq -> COMMA Object . Objectseq  / 23

RBRACKET => reduce 4
COMMA => shift 42
Objectseq => goto 61

-----

State 55:

24 : Object -> LAMBDA IDENT COLON Object .  / 6

$ => reduce 24
IDENT => reduce 24
RBRACKET => reduce 24
RPAREN => reduce 24
COMMA => reduce 24
DEF => reduce 24
ELSE => reduce 24
RETURN => reduce 24
IFNAME => reduce 24

-----

State 56:

0 : Class -> . BOOL  / 13
1 : Class -> . INT  / 13
2 : Class -> . LIST  / 13
3 : Class -> . FUN  / 13
14 : ObjectAtom -> ISINSTANCE LPAREN Object COMMA . Class RPAREN  / 7

BOOL => shift 66
INT => shift 65
LIST => shift 64
FUN => shift 63
Class => goto 62

-----

State 57:

13 : ObjectAtom -> LEN LPAREN Object RPAREN .  / 7

$ => reduce 13
IDENT => reduce 13
LBRACKET => reduce 13
RBRACKET => reduce 13
LPAREN => reduce 13
RPAREN => reduce 13
COMMA => reduce 13
PLUS => reduce 13
LEQ => reduce 13
DEF => reduce 13
IF => reduce 13
ELSE => reduce 13
RETURN => reduce 13
IFNAME => reduce 13

-----

State 58:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 7
8 : ObjectAtom -> . IDENT  / 7
9 : ObjectAtom -> . NUMBER  / 7
10 : ObjectAtom -> . BOOLCONST  / 7
11 : ObjectAtom -> . LBRACKET RBRACKET  / 7
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 7
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 7
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 7
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 7
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 7
17 : ObjectPlus -> . ObjectAtom  / 8
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 8
19 : ObjectLeq -> . ObjectPlus  / 18
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 18
21 : ObjectIf -> . ObjectLeq  / 6
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 6
22 : ObjectIf -> ObjectLeq IF Object ELSE . Object  / 6
23 : Object -> . ObjectIf  / 6
24 : Object -> . LAMBDA IDENT COLON Object  / 6

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 67
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 59:

30 : Prog -> Declseq IFNAME PRINT LPAREN Object . RPAREN  / 0

RPAREN => shift 68

-----

State 60:

28 : Decl -> DEF IDENT LPAREN IDENT RPAREN . COLON Declseq RETURN Object  / 9

COLON => shift 69

-----

State 61:

6 : Objectseq -> COMMA Object Objectseq .  / 23

RBRACKET => reduce 6

-----

State 62:

14 : ObjectAtom -> ISINSTANCE LPAREN Object COMMA Class . RPAREN  / 7

RPAREN => shift 70

-----

State 63:

3 : Class -> FUN .  / 13

RPAREN => reduce 3

-----

State 64:

2 : Class -> LIST .  / 13

RPAREN => reduce 2

-----

State 65:

1 : Class -> INT .  / 13

RPAREN => reduce 1

-----

State 66:

0 : Class -> BOOL .  / 13

RPAREN => reduce 0

-----

State 67:

22 : ObjectIf -> ObjectLeq IF Object ELSE Object .  / 6

$ => reduce 22
IDENT => reduce 22
RBRACKET => reduce 22
RPAREN => reduce 22
COMMA => reduce 22
DEF => reduce 22
ELSE => reduce 22
RETURN => reduce 22
IFNAME => reduce 22

-----

State 68:

30 : Prog -> Declseq IFNAME PRINT LPAREN Object RPAREN .  / 0

$ => reduce 30

-----

State 69:

25 : Declseq -> .  / 37
26 : Declseq -> . Decl Declseq  / 37
27 : Decl -> . IDENT EQUAL Object  / 38
28 : Decl -> . DEF IDENT LPAREN IDENT RPAREN COLON Declseq RETURN Object  / 38
28 : Decl -> DEF IDENT LPAREN IDENT RPAREN COLON . Declseq RETURN Object  / 9

IDENT => shift 33
DEF => shift 5
RETURN => reduce 25
Declseq => goto 71
Decl => goto 16

-----

State 70:

14 : ObjectAtom -> ISINSTANCE LPAREN Object COMMA Class RPAREN .  / 7

$ => reduce 14
IDENT => reduce 14
LBRACKET => reduce 14
RBRACKET => reduce 14
LPAREN => reduce 14
RPAREN => reduce 14
COMMA => reduce 14
PLUS => reduce 14
LEQ => reduce 14
DEF => reduce 14
IF => reduce 14
ELSE => reduce 14
RETURN => reduce 14
IFNAME => reduce 14

-----

State 71:

28 : Decl -> DEF IDENT LPAREN IDENT RPAREN COLON Declseq . RETURN Object  / 9

RETURN => shift 72

-----

State 72:

7 : ObjectAtom -> . LPAREN Object RPAREN  / 24
8 : ObjectAtom -> . IDENT  / 24
9 : ObjectAtom -> . NUMBER  / 24
10 : ObjectAtom -> . BOOLCONST  / 24
11 : ObjectAtom -> . LBRACKET RBRACKET  / 24
12 : ObjectAtom -> . LBRACKET Object Objectseq RBRACKET  / 24
13 : ObjectAtom -> . LEN LPAREN Object RPAREN  / 24
14 : ObjectAtom -> . ISINSTANCE LPAREN Object COMMA Class RPAREN  / 24
15 : ObjectAtom -> . ObjectAtom LBRACKET Object RBRACKET  / 24
16 : ObjectAtom -> . ObjectAtom LPAREN Object RPAREN  / 24
17 : ObjectPlus -> . ObjectAtom  / 25
18 : ObjectPlus -> . ObjectPlus PLUS ObjectAtom  / 25
19 : ObjectLeq -> . ObjectPlus  / 26
20 : ObjectLeq -> . ObjectPlus LEQ ObjectPlus  / 26
21 : ObjectIf -> . ObjectLeq  / 9
22 : ObjectIf -> . ObjectLeq IF Object ELSE Object  / 9
23 : Object -> . ObjectIf  / 9
24 : Object -> . LAMBDA IDENT COLON Object  / 9
28 : Decl -> DEF IDENT LPAREN IDENT RPAREN COLON Declseq RETURN . Object  / 9

IDENT => shift 22
NUMBER => shift 9
BOOLCONST => shift 10
LBRACKET => shift 8
LPAREN => shift 6
ISINSTANCE => shift 12
LEN => shift 13
LAMBDA => shift 11
Object => goto 73
ObjectAtom => goto 3
ObjectPlus => goto 15
ObjectLeq => goto 14
ObjectIf => goto 2

-----

State 73:

28 : Decl -> DEF IDENT LPAREN IDENT RPAREN COLON Declseq RETURN Object .  / 9

IDENT => reduce 28
DEF => reduce 28
RETURN => reduce 28
IFNAME => reduce 28

-----

lookahead 0 = $
lookahead 1 = $ LBRACKET LPAREN PLUS LEQ IF
lookahead 2 = $ PLUS LEQ IF
lookahead 3 = $ IF
lookahead 4 = IFNAME
lookahead 5 = IDENT DEF IFNAME
lookahead 6 = $ IDENT RBRACKET RPAREN COMMA DEF ELSE RETURN IFNAME
lookahead 7 = $ IDENT LBRACKET RBRACKET LPAREN RPAREN COMMA PLUS LEQ DEF IF ELSE RETURN IFNAME
lookahead 8 = $ IDENT RBRACKET RPAREN COMMA PLUS LEQ DEF IF ELSE RETURN IFNAME
lookahead 9 = IDENT DEF RETURN IFNAME
lookahead 10 = LBRACKET LPAREN RPAREN PLUS LEQ IF
lookahead 11 = RPAREN PLUS LEQ IF
lookahead 12 = RPAREN IF
lookahead 13 = RPAREN
lookahead 14 = LBRACKET RBRACKET LPAREN COMMA PLUS LEQ IF
lookahead 15 = RBRACKET COMMA PLUS LEQ IF
lookahead 16 = RBRACKET COMMA IF
lookahead 17 = RBRACKET COMMA
lookahead 18 = $ IDENT RBRACKET RPAREN COMMA DEF IF ELSE RETURN IFNAME
lookahead 19 = RETURN IFNAME
lookahead 20 = LBRACKET RBRACKET LPAREN PLUS LEQ IF
lookahead 21 = RBRACKET PLUS LEQ IF
lookahead 22 = RBRACKET IF
lookahead 23 = RBRACKET
lookahead 24 = IDENT LBRACKET LPAREN PLUS LEQ DEF IF RETURN IFNAME
lookahead 25 = IDENT PLUS LEQ DEF IF RETURN IFNAME
lookahead 26 = IDENT DEF IF RETURN IFNAME
lookahead 27 = LBRACKET LPAREN COMMA PLUS LEQ IF
lookahead 28 = COMMA PLUS LEQ IF
lookahead 29 = COMMA IF
lookahead 30 = COMMA
lookahead 31 = LBRACKET LPAREN PLUS LEQ IF ELSE
lookahead 32 = PLUS LEQ IF ELSE
lookahead 33 = IF ELSE
lookahead 34 = ELSE
lookahead 35 = $ IDENT LBRACKET RBRACKET LPAREN RPAREN COMMA PLUS DEF IF ELSE RETURN IFNAME
lookahead 36 = $ IDENT RBRACKET RPAREN COMMA PLUS DEF IF ELSE RETURN IFNAME
lookahead 37 = RETURN
lookahead 38 = IDENT DEF RETURN

*)

struct
  local
    structure Value =
    struct
      datatype nonterminal =
        nonterminal
      | string of Arg.string
      | int of Arg.int
      | bool of Arg.bool
      | class of Arg.class
      | objectseq of Arg.objectseq
      | object of Arg.object
      | declseq of Arg.declseq
      | decl of Arg.decl
      | prog of Arg.prog
    end
    structure ParseEngine =
      ParseEngineFun
        (structure Streamable = Streamable
         type terminal = Arg.terminal
         type value = Value.nonterminal
         val dummy = Value.nonterminal
         fun read terminal =
           (case terminal of
              Arg.IDENT x => (1, Value.string x)
            | Arg.NUMBER x => (2, Value.int x)
            | Arg.BOOLCONST x => (3, Value.bool x)
            | Arg.LBRACKET => (4, Value.nonterminal)
            | Arg.RBRACKET => (5, Value.nonterminal)
            | Arg.LPAREN => (6, Value.nonterminal)
            | Arg.RPAREN => (7, Value.nonterminal)
            | Arg.COLON => (8, Value.nonterminal)
            | Arg.COMMA => (9, Value.nonterminal)
            | Arg.EQUAL => (10, Value.nonterminal)
            | Arg.PLUS => (11, Value.nonterminal)
            | Arg.LEQ => (12, Value.nonterminal)
            | Arg.SEMICOLON => (13, Value.nonterminal)
            | Arg.DEF => (14, Value.nonterminal)
            | Arg.ISINSTANCE => (15, Value.nonterminal)
            | Arg.LEN => (16, Value.nonterminal)
            | Arg.IF => (17, Value.nonterminal)
            | Arg.ELSE => (18, Value.nonterminal)
            | Arg.LAMBDA => (19, Value.nonterminal)
            | Arg.RETURN => (20, Value.nonterminal)
            | Arg.IFNAME => (21, Value.nonterminal)
            | Arg.PRINT => (22, Value.nonterminal)
            | Arg.BOOL => (23, Value.nonterminal)
            | Arg.INT => (24, Value.nonterminal)
            | Arg.LIST => (25, Value.nonterminal)
            | Arg.FUN => (26, Value.nonterminal)))
  in
    val parse = ParseEngine.parse
      ( ParseEngine.next5x1
          "\128\136\138\139\137\128\135\128\128\128\128\128\128\128\134\141\142\128\128\140\128e\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\128\128\128gg\128\128\128g\128g\128g\128\128\128\128g\128\128\128g\128gg\128\128\128\128\128\128\128\128\128\128mm\128\128\149m\148m\128m\128mm\128m\128\128mm\128mm\128\128\128\128\128\128\128\128\128\128a\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\150\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128v\128\128\128v\128v\128\128\128\153vv\128\128\128\128v\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\154\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128uu\128\128uuuu\128u\128uu\128u\128\128uu\128uu\128\128\128\128\128\128\128\128\128\128tt\128\128tttt\128t\128tt\128t\128\128tt\128tt\128\128\128\128\128\128\128\128\128\128\128\156\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\157\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\158\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ii\128\128\128i\128i\128i\128\128\128\128i\128\128\159i\128ii\128\128\128\128\128\128\128\128\128\128kk\128\128\128k\128k\128k\128\161\160\128k\128\128kk\128kk\128\128\128\128\128\128\128\128\128\128\128\162\128\128\128\128\128\128\128\128\128\128\128\128\134\128\128\128\128\128eevv\128\128vvvv\128v\128vv\128v\128\128vv\128vv\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\168\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128ss\128\128ssss\128s\128ss\128s\128\128ss\128ss\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128\128\128\171\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\172\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ddww\128\128wwww\128w\128ww\128w\128\128ww\128ww\128\128\128\128\128\128\128\128\128\128\128c\128\128\128\128\128\128\128\128\128\128\128\128c\128\128\128\128\128cc\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\182\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137yjj\128\128\128j\128j\128j\128\161\128\128j\128\128jj\128jj\128\128\128\128\128\128\128\128\128\128ll\128\128\149l\148l\128l\128ll\128l\128\128ll\128ll\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128nn\128\128nnnn\128n\128nn\128n\128\128nn\128nn\128\128\128\128\128\128\128\128\128\128oo\128\128oooo\128o\128oo\128o\128\128oo\128oo\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\189\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128rr\128\128rrrr\128r\128rr\128r\128\128rr\128rr\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128\128\128\171\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ff\128\128\128f\128f\128f\128\128\128\128f\128\128\128f\128ff\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\195\194\193\192\128\128\128\128\128qq\128\128qqqq\128q\128qq\128q\128\128qq\128qq\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\197\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\198\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\199\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128hh\128\128\128h\128h\128h\128\128\128\128h\128\128\128h\128hh\128\128\128\128\128\128\128\128\128\128`\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\162\128\128\128\128\128\128\128\128\128\128\128\128\134\128\128\128\128\128e\128\128\128\128\128\128\128\128\128\128\128pp\128\128pppp\128p\128pp\128p\128\128pp\128pp\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\201\128\128\128\128\128\128\128\128\128\128\128\128\151\138\139\137\128\135\128\128\128\128\128\128\128\128\141\142\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128b\128\128\128\128\128\128\128\128\128\128\128\128b\128\128\128\128\128bb\128\128\128\128\128\128\128\128\128\128"
      , ParseEngine.next5x1

      , Vector.fromList
          [ ( 0
            , 1
            , (fn _ :: rest => Value.class (Arg.class_bool {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 0
            , 1
            , (fn _ :: rest => Value.class (Arg.class_int {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 0
            , 1
            , (fn _ :: rest => Value.class (Arg.class_list {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 0
            , 1
            , (fn _ :: rest => Value.class (Arg.class_fun {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (1, 0, (fn rest => Value.objectseq (Arg.objectseq_nil {}) :: rest))
          , ( 1
            , 1
            , (fn _ :: rest => Value.objectseq (Arg.objectseq_nil {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn Value.objectseq (arg0) :: Value.object (arg1) :: _ :: rest =>
                 Value.objectseq (Arg.objectseq_cons {2 = arg0, 1 = arg1})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 3
            , (fn _ :: Value.object (arg0) :: _ :: rest =>
                 Value.object (Arg.object_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 1
            , (fn Value.string (arg0) :: rest =>
                 Value.object (Arg.object_var arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 1
            , (fn Value.int (arg0) :: rest =>
                 Value.object (Arg.object_int arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 1
            , (fn Value.bool (arg0) :: rest =>
                 Value.object (Arg.object_bool arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 2
            , (fn _ :: _ :: rest => Value.object (Arg.object_nil {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 4
            , (fn _ ::
                   Value.objectseq (arg0) :: Value.object (arg1) :: _ :: rest =>
                 Value.object (Arg.object_cons {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 4
            , (fn _ :: Value.object (arg0) :: _ :: _ :: rest =>
                 Value.object (Arg.object_len arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 6
            , (fn _ ::
                   Value.class (arg0) ::
                     _ :: Value.object (arg1) :: _ :: _ :: rest =>
                 Value.object (Arg.object_isinstance {2 = arg0, 1 = arg1})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 4
            , (fn _ :: Value.object (arg0) :: _ :: Value.object (arg1) :: rest =>
                 Value.object (Arg.object_index {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 4
            , (fn _ :: Value.object (arg0) :: _ :: Value.object (arg1) :: rest =>
                 Value.object (Arg.object_ap {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 4
            , 1
            , (fn Value.object (arg0) :: rest =>
                 Value.object (Arg.object_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 4
            , 3
            , (fn Value.object (arg0) :: _ :: Value.object (arg1) :: rest =>
                 Value.object (Arg.object_plus {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 1
            , (fn Value.object (arg0) :: rest =>
                 Value.object (Arg.object_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 3
            , (fn Value.object (arg0) :: _ :: Value.object (arg1) :: rest =>
                 Value.object (Arg.object_leq {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 6
            , 1
            , (fn Value.object (arg0) :: rest =>
                 Value.object (Arg.object_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 6
            , 5
            , (fn Value.object (arg0) ::
                   _ :: Value.object (arg1) :: _ :: Value.object (arg2) :: rest =>
                 Value.object (Arg.object_if {3 = arg0, 1 = arg1, 2 = arg2})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 2
            , 1
            , (fn Value.object (arg0) :: rest =>
                 Value.object (Arg.object_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 2
            , 4
            , (fn Value.object (arg0) :: _ :: Value.string (arg1) :: _ :: rest =>
                 Value.object (Arg.object_lam {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (7, 0, (fn rest => Value.declseq (Arg.declseq_nil {}) :: rest))
          , ( 7
            , 2
            , (fn Value.declseq (arg0) :: Value.decl (arg1) :: rest =>
                 Value.declseq (Arg.declseq_cons {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 3
            , (fn Value.object (arg0) :: _ :: Value.string (arg1) :: rest =>
                 Value.decl (Arg.decl_assign {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 9
            , (fn Value.object (arg0) ::
                   _ ::
                     Value.declseq (arg1) ::
                       _ ::
                         _ ::
                           Value.string (arg2) ::
                             _ :: Value.string (arg3) :: _ :: rest =>
                 Value.decl (Arg.decl_def
                   {4 = arg0, 3 = arg1, 2 = arg2, 1 = arg3}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 1
            , (fn Value.object (arg0) :: rest =>
                 Value.prog (Arg.prog_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 6
            , (fn _ ::
                   Value.object (arg0) ::
                     _ :: _ :: _ :: Value.declseq (arg1) :: rest =>
                 Value.prog (Arg.prog_mk {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          ]
      , (fn Value.prog x => x | _ => raise (Fail "bad parser"))
      , Arg.error
      )
  end
end
