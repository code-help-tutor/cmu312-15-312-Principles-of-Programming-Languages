(* File generated by CM-Yacc version 2.1 *)

functor ParseMain
  (structure Streamable: STREAMABLE
   structure Arg:
   sig
     type string
     type int
     type tyfield
     type tyfieldseq
     type typ
     type unittp
     type casee
     type caseseq
     type fieldseq
     type exp

     val exp_fn: string * typ * exp -> exp
     val exp_leq: exp * exp -> exp
     val exp_plus: exp * exp -> exp
     val exp_proj: exp * string -> exp
     val exp_unfold: exp -> exp
     val exp_fold: string * typ * exp -> exp
     val exp_in: string * typ * exp -> exp
     val exp_app: exp * exp -> exp
     val exp_case: typ * exp * caseseq -> exp
     val exp_tuple: fieldseq -> exp
     val exp_number: int -> exp
     val exp_error: typ -> exp
     val exp_ident: string -> exp
     val exp_id: exp -> exp
     val fieldseq_cons: string * exp * fieldseq -> fieldseq
     val fieldseq_nil: unit -> fieldseq
     val caseseq_cons: casee * caseseq -> caseseq
     val caseseq_nil: unit -> caseseq
     val case_mk: string * string * exp -> casee
     val unittm: unit -> unittp
     val typ_rec: string * typ -> typ
     val typ_arrow: typ * typ -> typ
     val typ_sum: tyfieldseq -> typ
     val typ_prod: tyfieldseq -> typ
     val typ_id: typ -> typ
     val typ_int: unit -> typ
     val tyfieldseq_cons: tyfield * tyfieldseq -> tyfieldseq
     val tyfieldseq_nil: unit -> tyfieldseq
     val tyfield_mk: string * typ -> tyfield

     datatype terminal =
       IDENT of string
     | NUMBER of int
     | LANGLE
     | RANGLE
     | LBRACE
     | RBRACE
     | LBRACKET
     | RBRACKET
     | LPAREN
     | RPAREN
     | ARROW
     | BAR
     | COLON
     | COMMA
     | DARROW
     | DOT
     | EQUAL
     | PLUS
     | STAR
     | SEMICOLON
     | INT
     | LEQ
     | REC
     | ERROR
     | IN
     | CASE
     | FN
     | FOLD
     | UNFOLD

     val error: terminal Streamable.t -> exn
   end) :>
sig
  val parse: Arg.terminal Streamable.t -> Arg.exp * Arg.terminal Streamable.t
end =

(*

AUTOMATON LISTING
=================

State 0:

start -> . Exp  / 0
16 : ExpAtom -> . LPAREN Exp RPAREN  / 1
17 : ExpAtom -> . IDENT  / 1
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 1
19 : ExpAtom -> . NUMBER  / 1
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 1
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 1
22 : ExpApp -> . ExpAtom  / 1
23 : ExpApp -> . ExpApp ExpAtom  / 1
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 1
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 1
26 : ExpApp -> . UNFOLD ExpAtom  / 1
27 : ExpPost -> . ExpApp  / 2
28 : ExpPost -> . ExpPost DOT IDENT  / 2
29 : Exp -> . ExpPost  / 0
30 : Exp -> . ExpPost PLUS ExpPost  / 0
31 : Exp -> . ExpPost LEQ ExpPost  / 0
32 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 0

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FN => shift 1
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
Exp => goto 14
ExpApp => goto 13
ExpPost => goto 9

-----

State 1:

32 : Exp -> FN . LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 3

LPAREN => shift 15

-----

State 2:

21 : ExpAtom -> CASE . LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 4

LBRACKET => shift 16

-----

State 3:

24 : ExpApp -> IN . LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 5

LBRACKET => shift 17

-----

State 4:

18 : ExpAtom -> ERROR . LBRACKET Typ RBRACKET  / 4

LBRACKET => shift 18

-----

State 5:

14 : Fieldseq -> .  / 6
15 : Fieldseq -> . IDENT EQUAL Exp COMMA Fieldseq  / 6
20 : ExpAtom -> LANGLE . Fieldseq RANGLE  / 4

IDENT => shift 20
RANGLE => reduce 14
Fieldseq => goto 19

-----

State 6:

19 : ExpAtom -> NUMBER .  / 4

$ => reduce 19
IDENT => reduce 19
NUMBER => reduce 19
LANGLE => reduce 19
LBRACE => reduce 19
RBRACE => reduce 19
LPAREN => reduce 19
RPAREN => reduce 19
BAR => reduce 19
COMMA => reduce 19
DOT => reduce 19
PLUS => reduce 19
LEQ => reduce 19
ERROR => reduce 19
CASE => reduce 19

-----

State 7:

17 : ExpAtom -> IDENT .  / 4

$ => reduce 17
IDENT => reduce 17
NUMBER => reduce 17
LANGLE => reduce 17
LBRACE => reduce 17
RBRACE => reduce 17
LPAREN => reduce 17
RPAREN => reduce 17
BAR => reduce 17
COMMA => reduce 17
DOT => reduce 17
PLUS => reduce 17
LEQ => reduce 17
ERROR => reduce 17
CASE => reduce 17

-----

State 8:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 7
16 : ExpAtom -> LPAREN . Exp RPAREN  / 4
17 : ExpAtom -> . IDENT  / 7
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 7
19 : ExpAtom -> . NUMBER  / 7
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 7
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 7
22 : ExpApp -> . ExpAtom  / 7
23 : ExpApp -> . ExpApp ExpAtom  / 7
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 7
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 7
26 : ExpApp -> . UNFOLD ExpAtom  / 7
27 : ExpPost -> . ExpApp  / 8
28 : ExpPost -> . ExpPost DOT IDENT  / 8
29 : Exp -> . ExpPost  / 9
30 : Exp -> . ExpPost PLUS ExpPost  / 9
31 : Exp -> . ExpPost LEQ ExpPost  / 9
32 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 9

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FN => shift 1
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
Exp => goto 21
ExpApp => goto 13
ExpPost => goto 9

-----

State 9:

28 : ExpPost -> ExpPost . DOT IDENT  / 10
29 : Exp -> ExpPost .  / 3
30 : Exp -> ExpPost . PLUS ExpPost  / 3
31 : Exp -> ExpPost . LEQ ExpPost  / 3

$ => reduce 29
LBRACE => reduce 29
RPAREN => reduce 29
COMMA => reduce 29
DOT => shift 24
PLUS => shift 23
LEQ => shift 22

-----

State 10:

22 : ExpApp -> ExpAtom .  / 5

$ => reduce 22
IDENT => reduce 22
NUMBER => reduce 22
LANGLE => reduce 22
LBRACE => reduce 22
LPAREN => reduce 22
RPAREN => reduce 22
COMMA => reduce 22
DOT => reduce 22
PLUS => reduce 22
LEQ => reduce 22
ERROR => reduce 22
CASE => reduce 22

-----

State 11:

25 : ExpApp -> FOLD . LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 5

LBRACKET => shift 25

-----

State 12:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 5
17 : ExpAtom -> . IDENT  / 5
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 5
19 : ExpAtom -> . NUMBER  / 5
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 5
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 5
26 : ExpApp -> UNFOLD . ExpAtom  / 5

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
CASE => shift 2
ExpAtom => goto 26

-----

State 13:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 5
17 : ExpAtom -> . IDENT  / 5
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 5
19 : ExpAtom -> . NUMBER  / 5
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 5
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 5
23 : ExpApp -> ExpApp . ExpAtom  / 5
27 : ExpPost -> ExpApp .  / 10

$ => reduce 27
IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LBRACE => reduce 27
LPAREN => shift 8
RPAREN => reduce 27
COMMA => reduce 27
DOT => reduce 27
PLUS => reduce 27
LEQ => reduce 27
ERROR => shift 4
CASE => shift 2
ExpAtom => goto 27

-----

State 14:

start -> Exp .  / 0

$ => accept

-----

State 15:

32 : Exp -> FN LPAREN . IDENT COLON Typ RPAREN DARROW Exp  / 3

IDENT => shift 28

-----

State 16:

3 : Typ -> . INT  / 11
4 : Typ -> . LPAREN Typ RPAREN  / 11
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 11
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 11
7 : Typ -> . Typ ARROW Typ  / 11
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 11
21 : ExpAtom -> CASE LBRACKET . Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 4

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 29

-----

State 17:

24 : ExpApp -> IN LBRACKET . IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 5

IDENT => shift 35

-----

State 18:

3 : Typ -> . INT  / 11
4 : Typ -> . LPAREN Typ RPAREN  / 11
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 11
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 11
7 : Typ -> . Typ ARROW Typ  / 11
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 11
18 : ExpAtom -> ERROR LBRACKET . Typ RBRACKET  / 4

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 36

-----

State 19:

20 : ExpAtom -> LANGLE Fieldseq . RANGLE  / 4

RANGLE => shift 37

-----

State 20:

15 : Fieldseq -> IDENT . EQUAL Exp COMMA Fieldseq  / 6

EQUAL => shift 38

-----

State 21:

16 : ExpAtom -> LPAREN Exp . RPAREN  / 4

RPAREN => shift 39

-----

State 22:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 12
17 : ExpAtom -> . IDENT  / 12
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 12
19 : ExpAtom -> . NUMBER  / 12
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 12
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 12
22 : ExpApp -> . ExpAtom  / 12
23 : ExpApp -> . ExpApp ExpAtom  / 12
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 12
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 12
26 : ExpApp -> . UNFOLD ExpAtom  / 12
27 : ExpPost -> . ExpApp  / 13
28 : ExpPost -> . ExpPost DOT IDENT  / 13
31 : Exp -> ExpPost LEQ . ExpPost  / 3

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
ExpApp => goto 13
ExpPost => goto 40

-----

State 23:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 12
17 : ExpAtom -> . IDENT  / 12
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 12
19 : ExpAtom -> . NUMBER  / 12
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 12
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 12
22 : ExpApp -> . ExpAtom  / 12
23 : ExpApp -> . ExpApp ExpAtom  / 12
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 12
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 12
26 : ExpApp -> . UNFOLD ExpAtom  / 12
27 : ExpPost -> . ExpApp  / 13
28 : ExpPost -> . ExpPost DOT IDENT  / 13
30 : Exp -> ExpPost PLUS . ExpPost  / 3

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
ExpApp => goto 13
ExpPost => goto 41

-----

State 24:

28 : ExpPost -> ExpPost DOT . IDENT  / 10

IDENT => shift 42

-----

State 25:

25 : ExpApp -> FOLD LBRACKET . IDENT DOT Typ RBRACKET ExpAtom  / 5

IDENT => shift 43

-----

State 26:

26 : ExpApp -> UNFOLD ExpAtom .  / 5

$ => reduce 26
IDENT => reduce 26
NUMBER => reduce 26
LANGLE => reduce 26
LBRACE => reduce 26
LPAREN => reduce 26
RPAREN => reduce 26
COMMA => reduce 26
DOT => reduce 26
PLUS => reduce 26
LEQ => reduce 26
ERROR => reduce 26
CASE => reduce 26

-----

State 27:

23 : ExpApp -> ExpApp ExpAtom .  / 5

$ => reduce 23
IDENT => reduce 23
NUMBER => reduce 23
LANGLE => reduce 23
LBRACE => reduce 23
LPAREN => reduce 23
RPAREN => reduce 23
COMMA => reduce 23
DOT => reduce 23
PLUS => reduce 23
LEQ => reduce 23
ERROR => reduce 23
CASE => reduce 23

-----

State 28:

32 : Exp -> FN LPAREN IDENT . COLON Typ RPAREN DARROW Exp  / 3

COLON => shift 44

-----

State 29:

7 : Typ -> Typ . ARROW Typ  / 11
21 : ExpAtom -> CASE LBRACKET Typ . RBRACKET Exp LBRACE Caseseq RBRACE  / 4

RBRACKET => shift 45
ARROW => shift 46

-----

State 30:

8 : Typ -> REC . LPAREN IDENT DOT Typ RPAREN  / 14

LPAREN => shift 47

-----

State 31:

3 : Typ -> INT .  / 14

RBRACE => reduce 3
RBRACKET => reduce 3
RPAREN => reduce 3
ARROW => reduce 3
COMMA => reduce 3

-----

State 32:

3 : Typ -> . INT  / 15
4 : Typ -> . LPAREN Typ RPAREN  / 15
4 : Typ -> LPAREN . Typ RPAREN  / 14
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 15
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 15
7 : Typ -> . Typ ARROW Typ  / 15
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 15

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 48

-----

State 33:

0 : Tyfield -> . IDENT COLON Typ  / 16
1 : Tyfieldseq -> .  / 17
2 : Tyfieldseq -> . Tyfield COMMA Tyfieldseq  / 17
6 : Typ -> LBRACKET . Tyfieldseq RBRACKET  / 14

IDENT => shift 51
RBRACKET => reduce 1
Tyfield => goto 50
Tyfieldseq => goto 49

-----

State 34:

0 : Tyfield -> . IDENT COLON Typ  / 16
1 : Tyfieldseq -> .  / 6
2 : Tyfieldseq -> . Tyfield COMMA Tyfieldseq  / 6
5 : Typ -> LANGLE . Tyfieldseq RANGLE  / 14

IDENT => shift 51
RANGLE => reduce 1
Tyfield => goto 50
Tyfieldseq => goto 52

-----

State 35:

24 : ExpApp -> IN LBRACKET IDENT . RBRACKET LBRACE Typ RBRACE ExpAtom  / 5

RBRACKET => shift 53

-----

State 36:

7 : Typ -> Typ . ARROW Typ  / 11
18 : ExpAtom -> ERROR LBRACKET Typ . RBRACKET  / 4

RBRACKET => shift 54
ARROW => shift 46

-----

State 37:

20 : ExpAtom -> LANGLE Fieldseq RANGLE .  / 4

$ => reduce 20
IDENT => reduce 20
NUMBER => reduce 20
LANGLE => reduce 20
LBRACE => reduce 20
RBRACE => reduce 20
LPAREN => reduce 20
RPAREN => reduce 20
BAR => reduce 20
COMMA => reduce 20
DOT => reduce 20
PLUS => reduce 20
LEQ => reduce 20
ERROR => reduce 20
CASE => reduce 20

-----

State 38:

15 : Fieldseq -> IDENT EQUAL . Exp COMMA Fieldseq  / 6
16 : ExpAtom -> . LPAREN Exp RPAREN  / 18
17 : ExpAtom -> . IDENT  / 18
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 18
19 : ExpAtom -> . NUMBER  / 18
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 18
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 18
22 : ExpApp -> . ExpAtom  / 18
23 : ExpApp -> . ExpApp ExpAtom  / 18
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 18
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 18
26 : ExpApp -> . UNFOLD ExpAtom  / 18
27 : ExpPost -> . ExpApp  / 19
28 : ExpPost -> . ExpPost DOT IDENT  / 19
29 : Exp -> . ExpPost  / 16
30 : Exp -> . ExpPost PLUS ExpPost  / 16
31 : Exp -> . ExpPost LEQ ExpPost  / 16
32 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 16

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FN => shift 1
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
Exp => goto 55
ExpApp => goto 13
ExpPost => goto 9

-----

State 39:

16 : ExpAtom -> LPAREN Exp RPAREN .  / 4

$ => reduce 16
IDENT => reduce 16
NUMBER => reduce 16
LANGLE => reduce 16
LBRACE => reduce 16
RBRACE => reduce 16
LPAREN => reduce 16
RPAREN => reduce 16
BAR => reduce 16
COMMA => reduce 16
DOT => reduce 16
PLUS => reduce 16
LEQ => reduce 16
ERROR => reduce 16
CASE => reduce 16

-----

State 40:

28 : ExpPost -> ExpPost . DOT IDENT  / 13
31 : Exp -> ExpPost LEQ ExpPost .  / 3

$ => reduce 31
LBRACE => reduce 31
RPAREN => reduce 31
COMMA => reduce 31
DOT => shift 24

-----

State 41:

28 : ExpPost -> ExpPost . DOT IDENT  / 13
30 : Exp -> ExpPost PLUS ExpPost .  / 3

$ => reduce 30
LBRACE => reduce 30
RPAREN => reduce 30
COMMA => reduce 30
DOT => shift 24

-----

State 42:

28 : ExpPost -> ExpPost DOT IDENT .  / 10

$ => reduce 28
LBRACE => reduce 28
RPAREN => reduce 28
COMMA => reduce 28
DOT => reduce 28
PLUS => reduce 28
LEQ => reduce 28

-----

State 43:

25 : ExpApp -> FOLD LBRACKET IDENT . DOT Typ RBRACKET ExpAtom  / 5

DOT => shift 56

-----

State 44:

3 : Typ -> . INT  / 15
4 : Typ -> . LPAREN Typ RPAREN  / 15
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 15
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 15
7 : Typ -> . Typ ARROW Typ  / 15
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 15
32 : Exp -> FN LPAREN IDENT COLON . Typ RPAREN DARROW Exp  / 3

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 57

-----

State 45:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 20
17 : ExpAtom -> . IDENT  / 20
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 20
19 : ExpAtom -> . NUMBER  / 20
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 20
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 20
21 : ExpAtom -> CASE LBRACKET Typ RBRACKET . Exp LBRACE Caseseq RBRACE  / 4
22 : ExpApp -> . ExpAtom  / 20
23 : ExpApp -> . ExpApp ExpAtom  / 20
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 20
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 20
26 : ExpApp -> . UNFOLD ExpAtom  / 20
27 : ExpPost -> . ExpApp  / 21
28 : ExpPost -> . ExpPost DOT IDENT  / 21
29 : Exp -> . ExpPost  / 22
30 : Exp -> . ExpPost PLUS ExpPost  / 22
31 : Exp -> . ExpPost LEQ ExpPost  / 22
32 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 22

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FN => shift 1
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
Exp => goto 58
ExpApp => goto 13
ExpPost => goto 9

-----

State 46:

3 : Typ -> . INT  / 14
4 : Typ -> . LPAREN Typ RPAREN  / 14
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 14
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 14
7 : Typ -> . Typ ARROW Typ  / 14
7 : Typ -> Typ ARROW . Typ  / 14
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 14

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 59

-----

State 47:

8 : Typ -> REC LPAREN . IDENT DOT Typ RPAREN  / 14

IDENT => shift 60

-----

State 48:

4 : Typ -> LPAREN Typ . RPAREN  / 14
7 : Typ -> Typ . ARROW Typ  / 15

RPAREN => shift 61
ARROW => shift 46

-----

State 49:

6 : Typ -> LBRACKET Tyfieldseq . RBRACKET  / 14

RBRACKET => shift 62

-----

State 50:

2 : Tyfieldseq -> Tyfield . COMMA Tyfieldseq  / 23

COMMA => shift 63

-----

State 51:

0 : Tyfield -> IDENT . COLON Typ  / 16

COLON => shift 64

-----

State 52:

5 : Typ -> LANGLE Tyfieldseq . RANGLE  / 14

RANGLE => shift 65

-----

State 53:

24 : ExpApp -> IN LBRACKET IDENT RBRACKET . LBRACE Typ RBRACE ExpAtom  / 5

LBRACE => shift 66

-----

State 54:

18 : ExpAtom -> ERROR LBRACKET Typ RBRACKET .  / 4

$ => reduce 18
IDENT => reduce 18
NUMBER => reduce 18
LANGLE => reduce 18
LBRACE => reduce 18
RBRACE => reduce 18
LPAREN => reduce 18
RPAREN => reduce 18
BAR => reduce 18
COMMA => reduce 18
DOT => reduce 18
PLUS => reduce 18
LEQ => reduce 18
ERROR => reduce 18
CASE => reduce 18

-----

State 55:

15 : Fieldseq -> IDENT EQUAL Exp . COMMA Fieldseq  / 6

COMMA => shift 67

-----

State 56:

3 : Typ -> . INT  / 11
4 : Typ -> . LPAREN Typ RPAREN  / 11
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 11
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 11
7 : Typ -> . Typ ARROW Typ  / 11
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 11
25 : ExpApp -> FOLD LBRACKET IDENT DOT . Typ RBRACKET ExpAtom  / 5

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 68

-----

State 57:

7 : Typ -> Typ . ARROW Typ  / 15
32 : Exp -> FN LPAREN IDENT COLON Typ . RPAREN DARROW Exp  / 3

RPAREN => shift 69
ARROW => shift 46

-----

State 58:

21 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp . LBRACE Caseseq RBRACE  / 4

LBRACE => shift 70

-----

State 59:

7 : Typ -> Typ . ARROW Typ  / 14
7 : Typ -> Typ ARROW Typ .  / 14

RBRACE => reduce 7
RBRACKET => reduce 7
RPAREN => reduce 7
ARROW => shift 46, reduce 7  PRECEDENCE
COMMA => reduce 7

-----

State 60:

8 : Typ -> REC LPAREN IDENT . DOT Typ RPAREN  / 14

DOT => shift 71

-----

State 61:

4 : Typ -> LPAREN Typ RPAREN .  / 14

RBRACE => reduce 4
RBRACKET => reduce 4
RPAREN => reduce 4
ARROW => reduce 4
COMMA => reduce 4

-----

State 62:

6 : Typ -> LBRACKET Tyfieldseq RBRACKET .  / 14

RBRACE => reduce 6
RBRACKET => reduce 6
RPAREN => reduce 6
ARROW => reduce 6
COMMA => reduce 6

-----

State 63:

0 : Tyfield -> . IDENT COLON Typ  / 16
1 : Tyfieldseq -> .  / 23
2 : Tyfieldseq -> . Tyfield COMMA Tyfieldseq  / 23
2 : Tyfieldseq -> Tyfield COMMA . Tyfieldseq  / 23

IDENT => shift 51
RANGLE => reduce 1
RBRACKET => reduce 1
Tyfield => goto 50
Tyfieldseq => goto 72

-----

State 64:

0 : Tyfield -> IDENT COLON . Typ  / 16
3 : Typ -> . INT  / 24
4 : Typ -> . LPAREN Typ RPAREN  / 24
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 24
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 24
7 : Typ -> . Typ ARROW Typ  / 24
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 24

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 73

-----

State 65:

5 : Typ -> LANGLE Tyfieldseq RANGLE .  / 14

RBRACE => reduce 5
RBRACKET => reduce 5
RPAREN => reduce 5
ARROW => reduce 5
COMMA => reduce 5

-----

State 66:

3 : Typ -> . INT  / 25
4 : Typ -> . LPAREN Typ RPAREN  / 25
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 25
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 25
7 : Typ -> . Typ ARROW Typ  / 25
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 25
24 : ExpApp -> IN LBRACKET IDENT RBRACKET LBRACE . Typ RBRACE ExpAtom  / 5

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 74

-----

State 67:

14 : Fieldseq -> .  / 6
15 : Fieldseq -> . IDENT EQUAL Exp COMMA Fieldseq  / 6
15 : Fieldseq -> IDENT EQUAL Exp COMMA . Fieldseq  / 6

IDENT => shift 20
RANGLE => reduce 14
Fieldseq => goto 75

-----

State 68:

7 : Typ -> Typ . ARROW Typ  / 11
25 : ExpApp -> FOLD LBRACKET IDENT DOT Typ . RBRACKET ExpAtom  / 5

RBRACKET => shift 76
ARROW => shift 46

-----

State 69:

32 : Exp -> FN LPAREN IDENT COLON Typ RPAREN . DARROW Exp  / 3

DARROW => shift 77

-----

State 70:

9 : BarOrNot -> .  / 26
10 : BarOrNot -> . BAR  / 26
11 : Case -> . BarOrNot IDENT DOT IDENT DARROW ExpAtom  / 27
12 : Caseseq -> .  / 28
13 : Caseseq -> . Case Caseseq  / 28
21 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE . Caseseq RBRACE  / 4

IDENT => reduce 9
RBRACE => reduce 12
BAR => shift 81
BarOrNot => goto 80
Case => goto 79
Caseseq => goto 78

-----

State 71:

3 : Typ -> . INT  / 15
4 : Typ -> . LPAREN Typ RPAREN  / 15
5 : Typ -> . LANGLE Tyfieldseq RANGLE  / 15
6 : Typ -> . LBRACKET Tyfieldseq RBRACKET  / 15
7 : Typ -> . Typ ARROW Typ  / 15
8 : Typ -> . REC LPAREN IDENT DOT Typ RPAREN  / 15
8 : Typ -> REC LPAREN IDENT DOT . Typ RPAREN  / 14

LANGLE => shift 34
LBRACKET => shift 33
LPAREN => shift 32
INT => shift 31
REC => shift 30
Typ => goto 82

-----

State 72:

2 : Tyfieldseq -> Tyfield COMMA Tyfieldseq .  / 23

RANGLE => reduce 2
RBRACKET => reduce 2

-----

State 73:

0 : Tyfield -> IDENT COLON Typ .  / 16
7 : Typ -> Typ . ARROW Typ  / 24

ARROW => shift 46
COMMA => reduce 0

-----

State 74:

7 : Typ -> Typ . ARROW Typ  / 25
24 : ExpApp -> IN LBRACKET IDENT RBRACKET LBRACE Typ . RBRACE ExpAtom  / 5

RBRACE => shift 83
ARROW => shift 46

-----

State 75:

15 : Fieldseq -> IDENT EQUAL Exp COMMA Fieldseq .  / 6

RANGLE => reduce 15

-----

State 76:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 5
17 : ExpAtom -> . IDENT  / 5
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 5
19 : ExpAtom -> . NUMBER  / 5
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 5
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 5
25 : ExpApp -> FOLD LBRACKET IDENT DOT Typ RBRACKET . ExpAtom  / 5

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
CASE => shift 2
ExpAtom => goto 84

-----

State 77:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 5
17 : ExpAtom -> . IDENT  / 5
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 5
19 : ExpAtom -> . NUMBER  / 5
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 5
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 5
22 : ExpApp -> . ExpAtom  / 5
23 : ExpApp -> . ExpApp ExpAtom  / 5
24 : ExpApp -> . IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom  / 5
25 : ExpApp -> . FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom  / 5
26 : ExpApp -> . UNFOLD ExpAtom  / 5
27 : ExpPost -> . ExpApp  / 10
28 : ExpPost -> . ExpPost DOT IDENT  / 10
29 : Exp -> . ExpPost  / 3
30 : Exp -> . ExpPost PLUS ExpPost  / 3
31 : Exp -> . ExpPost LEQ ExpPost  / 3
32 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 3
32 : Exp -> FN LPAREN IDENT COLON Typ RPAREN DARROW . Exp  / 3

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
IN => shift 3
CASE => shift 2
FN => shift 1
FOLD => shift 11
UNFOLD => shift 12
ExpAtom => goto 10
Exp => goto 85
ExpApp => goto 13
ExpPost => goto 9

-----

State 78:

21 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq . RBRACE  / 4

RBRACE => shift 86

-----

State 79:

9 : BarOrNot -> .  / 26
10 : BarOrNot -> . BAR  / 26
11 : Case -> . BarOrNot IDENT DOT IDENT DARROW ExpAtom  / 27
12 : Caseseq -> .  / 28
13 : Caseseq -> . Case Caseseq  / 28
13 : Caseseq -> Case . Caseseq  / 28

IDENT => reduce 9
RBRACE => reduce 12
BAR => shift 81
BarOrNot => goto 80
Case => goto 79
Caseseq => goto 87

-----

State 80:

11 : Case -> BarOrNot . IDENT DOT IDENT DARROW ExpAtom  / 27

IDENT => shift 88

-----

State 81:

10 : BarOrNot -> BAR .  / 26

IDENT => reduce 10

-----

State 82:

7 : Typ -> Typ . ARROW Typ  / 15
8 : Typ -> REC LPAREN IDENT DOT Typ . RPAREN  / 14

RPAREN => shift 89
ARROW => shift 46

-----

State 83:

16 : ExpAtom -> . LPAREN Exp RPAREN  / 5
17 : ExpAtom -> . IDENT  / 5
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 5
19 : ExpAtom -> . NUMBER  / 5
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 5
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 5
24 : ExpApp -> IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE . ExpAtom  / 5

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
CASE => shift 2
ExpAtom => goto 90

-----

State 84:

25 : ExpApp -> FOLD LBRACKET IDENT DOT Typ RBRACKET ExpAtom .  / 5

$ => reduce 25
IDENT => reduce 25
NUMBER => reduce 25
LANGLE => reduce 25
LBRACE => reduce 25
LPAREN => reduce 25
RPAREN => reduce 25
COMMA => reduce 25
DOT => reduce 25
PLUS => reduce 25
LEQ => reduce 25
ERROR => reduce 25
CASE => reduce 25

-----

State 85:

32 : Exp -> FN LPAREN IDENT COLON Typ RPAREN DARROW Exp .  / 3

$ => reduce 32
LBRACE => reduce 32
RPAREN => reduce 32
COMMA => reduce 32

-----

State 86:

21 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE .  / 4

$ => reduce 21
IDENT => reduce 21
NUMBER => reduce 21
LANGLE => reduce 21
LBRACE => reduce 21
RBRACE => reduce 21
LPAREN => reduce 21
RPAREN => reduce 21
BAR => reduce 21
COMMA => reduce 21
DOT => reduce 21
PLUS => reduce 21
LEQ => reduce 21
ERROR => reduce 21
CASE => reduce 21

-----

State 87:

13 : Caseseq -> Case Caseseq .  / 28

RBRACE => reduce 13

-----

State 88:

11 : Case -> BarOrNot IDENT . DOT IDENT DARROW ExpAtom  / 27

DOT => shift 91

-----

State 89:

8 : Typ -> REC LPAREN IDENT DOT Typ RPAREN .  / 14

RBRACE => reduce 8
RBRACKET => reduce 8
RPAREN => reduce 8
ARROW => reduce 8
COMMA => reduce 8

-----

State 90:

24 : ExpApp -> IN LBRACKET IDENT RBRACKET LBRACE Typ RBRACE ExpAtom .  / 5

$ => reduce 24
IDENT => reduce 24
NUMBER => reduce 24
LANGLE => reduce 24
LBRACE => reduce 24
LPAREN => reduce 24
RPAREN => reduce 24
COMMA => reduce 24
DOT => reduce 24
PLUS => reduce 24
LEQ => reduce 24
ERROR => reduce 24
CASE => reduce 24

-----

State 91:

11 : Case -> BarOrNot IDENT DOT . IDENT DARROW ExpAtom  / 27

IDENT => shift 92

-----

State 92:

11 : Case -> BarOrNot IDENT DOT IDENT . DARROW ExpAtom  / 27

DARROW => shift 93

-----

State 93:

11 : Case -> BarOrNot IDENT DOT IDENT DARROW . ExpAtom  / 27
16 : ExpAtom -> . LPAREN Exp RPAREN  / 27
17 : ExpAtom -> . IDENT  / 27
18 : ExpAtom -> . ERROR LBRACKET Typ RBRACKET  / 27
19 : ExpAtom -> . NUMBER  / 27
20 : ExpAtom -> . LANGLE Fieldseq RANGLE  / 27
21 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE Caseseq RBRACE  / 27

IDENT => shift 7
NUMBER => shift 6
LANGLE => shift 5
LPAREN => shift 8
ERROR => shift 4
CASE => shift 2
ExpAtom => goto 94

-----

State 94:

11 : Case -> BarOrNot IDENT DOT IDENT DARROW ExpAtom .  / 27

IDENT => reduce 11
RBRACE => reduce 11
BAR => reduce 11

-----

lookahead 0 = $
lookahead 1 = $ IDENT NUMBER LANGLE LPAREN DOT PLUS LEQ ERROR CASE
lookahead 2 = $ DOT PLUS LEQ
lookahead 3 = $ LBRACE RPAREN COMMA
lookahead 4 = $ IDENT NUMBER LANGLE LBRACE RBRACE LPAREN RPAREN BAR COMMA DOT PLUS LEQ ERROR CASE
lookahead 5 = $ IDENT NUMBER LANGLE LBRACE LPAREN RPAREN COMMA DOT PLUS LEQ ERROR CASE
lookahead 6 = RANGLE
lookahead 7 = IDENT NUMBER LANGLE LPAREN RPAREN DOT PLUS LEQ ERROR CASE
lookahead 8 = RPAREN DOT PLUS LEQ
lookahead 9 = RPAREN
lookahead 10 = $ LBRACE RPAREN COMMA DOT PLUS LEQ
lookahead 11 = RBRACKET ARROW
lookahead 12 = $ IDENT NUMBER LANGLE LBRACE LPAREN RPAREN COMMA DOT ERROR CASE
lookahead 13 = $ LBRACE RPAREN COMMA DOT
lookahead 14 = RBRACE RBRACKET RPAREN ARROW COMMA
lookahead 15 = RPAREN ARROW
lookahead 16 = COMMA
lookahead 17 = RBRACKET
lookahead 18 = IDENT NUMBER LANGLE LPAREN COMMA DOT PLUS LEQ ERROR CASE
lookahead 19 = COMMA DOT PLUS LEQ
lookahead 20 = IDENT NUMBER LANGLE LBRACE LPAREN DOT PLUS LEQ ERROR CASE
lookahead 21 = LBRACE DOT PLUS LEQ
lookahead 22 = LBRACE
lookahead 23 = RANGLE RBRACKET
lookahead 24 = ARROW COMMA
lookahead 25 = RBRACE ARROW
lookahead 26 = IDENT
lookahead 27 = IDENT RBRACE BAR
lookahead 28 = RBRACE

*)

struct
  local
    structure Value =
    struct
      datatype nonterminal =
        nonterminal
      | string of Arg.string
      | int of Arg.int
      | tyfield of Arg.tyfield
      | tyfieldseq of Arg.tyfieldseq
      | typ of Arg.typ
      | unittp of Arg.unittp
      | casee of Arg.casee
      | caseseq of Arg.caseseq
      | fieldseq of Arg.fieldseq
      | exp of Arg.exp
    end
    structure ParseEngine =
      ParseEngineFun
        (structure Streamable = Streamable
         type terminal = Arg.terminal
         type value = Value.nonterminal
         val dummy = Value.nonterminal
         fun read terminal =
           (case terminal of
              Arg.IDENT x => (1, Value.string x)
            | Arg.NUMBER x => (2, Value.int x)
            | Arg.LANGLE => (3, Value.nonterminal)
            | Arg.RANGLE => (4, Value.nonterminal)
            | Arg.LBRACE => (5, Value.nonterminal)
            | Arg.RBRACE => (6, Value.nonterminal)
            | Arg.LBRACKET => (7, Value.nonterminal)
            | Arg.RBRACKET => (8, Value.nonterminal)
            | Arg.LPAREN => (9, Value.nonterminal)
            | Arg.RPAREN => (10, Value.nonterminal)
            | Arg.ARROW => (11, Value.nonterminal)
            | Arg.BAR => (12, Value.nonterminal)
            | Arg.COLON => (13, Value.nonterminal)
            | Arg.COMMA => (14, Value.nonterminal)
            | Arg.DARROW => (15, Value.nonterminal)
            | Arg.DOT => (16, Value.nonterminal)
            | Arg.EQUAL => (17, Value.nonterminal)
            | Arg.PLUS => (18, Value.nonterminal)
            | Arg.STAR => (19, Value.nonterminal)
            | Arg.SEMICOLON => (20, Value.nonterminal)
            | Arg.INT => (21, Value.nonterminal)
            | Arg.LEQ => (22, Value.nonterminal)
            | Arg.REC => (23, Value.nonterminal)
            | Arg.ERROR => (24, Value.nonterminal)
            | Arg.IN => (25, Value.nonterminal)
            | Arg.CASE => (26, Value.nonterminal)
            | Arg.FN => (27, Value.nonterminal)
            | Arg.FOLD => (28, Value.nonterminal)
            | Arg.UNFOLD => (29, Value.nonterminal)))
  in
    val parse = ParseEngine.parse
      ( ParseEngine.next5x1
p\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128kkkk\128kk\128\128kk\128k\128k\128k\128k\128\128\128k\128k\128k\128\128\128\128\128mmmm\128mm\128\128mm\128m\128m\128m\128m\128\128\128m\128m\128m\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\132\131\130\140\141\128\128a\128\128\128\128a\128\128\128\128a\128\128\128a\128\153\128\152\128\128\128\151\128\128\128\128\128\128\128\128\128hhhh\128h\128\128\128hh\128\128\128h\128h\128h\128\128\128h\128h\128h\128\128\128\128\128\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\128\131\128\128\128\128\128c\136\135\134\128c\128\128\128\137c\128\128\128c\128c\128c\128\128\128cdddd\128d\128\128\128dd\128\128\128d\128d\128d\128\128\128d\128d\128d\128\128\128\128\128gggg\128g\128\128\128gg\128\128\128g\128g\128g\128\128\128g\128g\128g\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\173\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\174\128\128\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\176\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{\128{\128{{\128\128{\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\163\128\128\128\162\128\161\128\128\128\128\128\128\128\128\128\128\128\160\128\159\128\128\128\128\128\128\128\128\128\180\128\128\128\128\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\180\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\182\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\183\128\128\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128jjjj\128jj\128\128jj\128j\128j\128j\128j\128\128\128j\128j\128j\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\132\131\130\140\141\128\128nnnn\128nn\128\128nn\128n\128n\128n\128n\128\128\128n\128n\128n\128\128\128\128\128_\128\128\128\128_\128\128\128\128_\128\128\128_\128\153\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128`\128\128\128\128`\128\128\128\128`\128\128\128`\128\153\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128b\128\128\128\128b\128\128\128\128b\128\128\128b\128b\128b\128\128\128bllll\128ll\128\128ll\128l\128l\128l\128l\128\128\128l\128l\128lw\128w\128w\175\128\128w\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\200\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128z\128zz\128\128z\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128x\128xx\128\128x\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\180\128\128}\128\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\163\128\128\128\162\128\161\128\128\128\128\128\128\128\128\128\128\128\160\128\159\128\128\128\128\128\128\128\128\128\128\128\128\128\128y\128y\128yy\128\128y\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\163\128\128\128\162\128\161\128\128\128\128\128\128\128\128\128\128\128\160\128\159\128\128\128\128\128\128\128\128\128\149\128\128p\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\205\128\128\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\206\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128u\128\128\128\128r\128\128\128\128\128\210\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\163\128\128\128\162\128\161\128\128\128\128\128\128\128\128\128\128\128\160\128\159\128\128\128\128\128\128\128\128\128\128\128\128|\128\128\128|\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\175\128\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\212\128\128\128\128\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128o\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\128\131\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\132\131\130\140\141\128\128\128\128\128\128\128\128\215\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128u\128\128\128\128r\128\128\128\128\128\210\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\217\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128t\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\218\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\128\131\128\128\128\128\128eeee\128e\128\128\128ee\128\128\128e\128e\128e\128\128\128e\128e\128e\128\128\128\128\128^\128\128\128\128^\128\128\128\128^\128\128\128^\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128iiii\128ii\128\128ii\128i\128i\128i\128i\128\128\128i\128i\128i\128\128\128\128\128\128\128\128\128\128\128q\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\220\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128v\128v\128vv\128\128v\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ffff\128f\128\128\128ff\128\128\128f\128f\128f\128\128\128f\128f\128f\128\128\128\128\128\128\221\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\222\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\135\134\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\133\128\131\128\128\128\128\128\128s\128\128\128\128s\128\128\128\128\128s\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128"
      , ParseEngine.next5x1

      , Vector.fromList
          [ ( 0
            , 3
            , (fn Value.typ (arg0) :: _ :: Value.string (arg1) :: rest =>
                 Value.tyfield (Arg.tyfield_mk {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 2
            , 0
            , (fn rest => Value.tyfieldseq (Arg.tyfieldseq_nil {}) :: rest)
            )
          , ( 2
            , 3
            , (fn Value.tyfieldseq (arg0) :: _ :: Value.tyfield (arg1) :: rest =>
                 Value.tyfieldseq (Arg.tyfieldseq_cons {2 = arg0, 1 = arg1})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 1
            , (fn _ :: rest => Value.typ (Arg.typ_int {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn _ :: Value.typ (arg0) :: _ :: rest =>
                 Value.typ (Arg.typ_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn _ :: Value.tyfieldseq (arg0) :: _ :: rest =>
                 Value.typ (Arg.typ_prod arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn _ :: Value.tyfieldseq (arg0) :: _ :: rest =>
                 Value.typ (Arg.typ_sum arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn Value.typ (arg0) :: _ :: Value.typ (arg1) :: rest =>
                 Value.typ (Arg.typ_arrow {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 6
            , (fn _ ::
                   Value.typ (arg0) ::
                     _ :: Value.string (arg1) :: _ :: _ :: rest =>
                 Value.typ (Arg.typ_rec {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (3, 0, (fn rest => Value.unittp (Arg.unittm {}) :: rest))
          , ( 3
            , 1
            , (fn _ :: rest => Value.unittp (Arg.unittm {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 4
            , 6
            , (fn Value.exp (arg0) ::
                   _ ::
                     Value.string (arg1) ::
                       _ :: Value.string (arg2) :: _ :: rest =>
                 Value.casee (Arg.case_mk {3 = arg0, 2 = arg1, 1 = arg2})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (6, 0, (fn rest => Value.caseseq (Arg.caseseq_nil {}) :: rest))
          , ( 6
            , 2
            , (fn Value.caseseq (arg0) :: Value.casee (arg1) :: rest =>
                 Value.caseseq (Arg.caseseq_cons {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (7, 0, (fn rest => Value.fieldseq (Arg.fieldseq_nil {}) :: rest))
          , ( 7
            , 5
            , (fn Value.fieldseq (arg0) ::
                   _ :: Value.exp (arg1) :: _ :: Value.string (arg2) :: rest =>
                 Value.fieldseq
                   (Arg.fieldseq_cons {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 3
            , (fn _ :: Value.exp (arg0) :: _ :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 1
            , (fn Value.string (arg0) :: rest =>
                 Value.exp (Arg.exp_ident arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 4
            , (fn _ :: Value.typ (arg0) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_error arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 1
            , (fn Value.int (arg0) :: rest =>
                 Value.exp (Arg.exp_number arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 3
            , (fn _ :: Value.fieldseq (arg0) :: _ :: rest =>
                 Value.exp (Arg.exp_tuple arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 8
            , (fn _ ::
                   Value.caseseq (arg0) ::
                     _ ::
                       Value.exp (arg1) ::
                         _ :: Value.typ (arg2) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_case {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 2
            , (fn Value.exp (arg0) :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_app {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 8
            , (fn Value.exp (arg0) ::
                   _ ::
                     Value.typ (arg1) ::
                       _ :: _ :: Value.string (arg2) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_in {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 7
            , (fn Value.exp (arg0) ::
                   _ ::
                     Value.typ (arg1) ::
                       _ :: Value.string (arg2) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_fold {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 9
            , 2
            , (fn Value.exp (arg0) :: _ :: rest =>
                 Value.exp (Arg.exp_unfold arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 10
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 10
            , 3
            , (fn Value.string (arg0) :: _ :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_proj {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 3
            , (fn Value.exp (arg0) :: _ :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_plus {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 3
            , (fn Value.exp (arg0) :: _ :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_leq {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 8
            , 8
            , (fn Value.exp (arg0) ::
                   _ ::
                     _ ::
                       Value.typ (arg1) ::
                         _ :: Value.string (arg2) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_fn {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          ]
      , (fn Value.exp x => x | _ => raise (Fail "bad parser"))
      , Arg.error
      )
  end
end
