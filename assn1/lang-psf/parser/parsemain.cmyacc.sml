(* File generated by CM-Yacc version 2.1 *)

functor ParseMain
  (structure Streamable: STREAMABLE
   structure Arg:
   sig
     type string
     type dir
     type typ
     type unittp
     type exp

     val exp_lam: string * typ * exp -> exp
     val exp_pr: exp * dir -> exp
     val exp_in: dir * typ * typ * exp -> exp
     val exp_ap: exp * exp -> exp
     val exp_case: typ * exp * string * exp * string * exp -> exp
     val exp_abort: typ * exp -> exp
     val exp_pair: exp * exp -> exp
     val exp_triv: unit -> exp
     val exp_var: string -> exp
     val exp_id: exp -> exp
     val unittm: unit -> unittp
     val typ_sum: typ * typ -> typ
     val typ_void: unit -> typ
     val typ_prod: typ * typ -> typ
     val typ_unit: unit -> typ
     val typ_arrow: typ * typ -> typ
     val typ_var: string -> typ
     val typ_id: typ -> typ
     val dir_r: unit -> dir
     val dir_l: unit -> dir

     datatype terminal =
       IDENT of string
     | STRING of string
     | LANGLE
     | RANGLE
     | LBRACE
     | RBRACE
     | LBRACKET
     | RBRACKET
     | LPAREN
     | RPAREN
     | ARROW
     | BAR
     | COLON
     | COMMA
     | DARROW
     | DOT
     | EQUAL
     | PLUS
     | STAR
     | SEMICOLON
     | UNIT
     | VOID
     | FN
     | CASE
     | IN
     | L
     | R

     val error: terminal Streamable.t -> exn
   end) :>
sig
  val parse: Arg.terminal Streamable.t -> Arg.exp * Arg.terminal Streamable.t
end =

(*

AUTOMATON LISTING
=================

State 0:

start -> . Exp  / 0
11 : ExpAtom -> . LPAREN Exp RPAREN  / 1
12 : ExpAtom -> . IDENT  / 1
13 : ExpAtom -> . LANGLE RANGLE  / 1
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 1
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 1
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 1
17 : ExpApp -> . ExpAtom  / 1
18 : ExpApp -> . ExpApp ExpAtom  / 1
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 1
20 : ExpPost -> . ExpApp  / 2
21 : ExpPost -> . ExpPost DOT Direction  / 2
22 : Exp -> . ExpPost  / 0
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 0

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 9
ExpApp => goto 5
ExpPost => goto 10

-----

State 1:

23 : Exp -> FN . LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 3

LPAREN => shift 11

-----

State 2:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 4
11 : ExpAtom -> LPAREN . Exp RPAREN  / 5
12 : ExpAtom -> . IDENT  / 4
13 : ExpAtom -> . LANGLE RANGLE  / 4
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 4
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 4
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 4
17 : ExpApp -> . ExpAtom  / 4
18 : ExpApp -> . ExpApp ExpAtom  / 4
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 4
20 : ExpPost -> . ExpApp  / 6
21 : ExpPost -> . ExpPost DOT Direction  / 6
22 : Exp -> . ExpPost  / 7
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 7

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 12
ExpApp => goto 5
ExpPost => goto 10

-----

State 3:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 8
12 : ExpAtom -> . IDENT  / 8
13 : ExpAtom -> . LANGLE RANGLE  / 8
13 : ExpAtom -> LANGLE . RANGLE  / 5
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 8
14 : ExpAtom -> LANGLE . Exp COMMA Exp RANGLE  / 5
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 8
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 8
17 : ExpApp -> . ExpAtom  / 8
18 : ExpApp -> . ExpApp ExpAtom  / 8
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 8
20 : ExpPost -> . ExpApp  / 9
21 : ExpPost -> . ExpPost DOT Direction  / 9
22 : Exp -> . ExpPost  / 10
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 10

IDENT => shift 4
LANGLE => shift 3
RANGLE => shift 13
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 14
ExpApp => goto 5
ExpPost => goto 10

-----

State 4:

12 : ExpAtom -> IDENT .  / 5

$ => reduce 12
IDENT => reduce 12
LANGLE => reduce 12
RANGLE => reduce 12
LBRACE => reduce 12
RBRACE => reduce 12
LPAREN => reduce 12
RPAREN => reduce 12
BAR => reduce 12
COMMA => reduce 12
DOT => reduce 12
CASE => reduce 12

-----

State 5:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 5
12 : ExpAtom -> . IDENT  / 5
13 : ExpAtom -> . LANGLE RANGLE  / 5
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 5
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5
18 : ExpApp -> ExpApp . ExpAtom  / 5
20 : ExpPost -> ExpApp .  / 11

$ => reduce 20
IDENT => shift 4
LANGLE => shift 3
RANGLE => reduce 20
LBRACE => reduce 20
RBRACE => reduce 20
LPAREN => shift 2
RPAREN => reduce 20
BAR => reduce 20
COMMA => reduce 20
DOT => reduce 20
CASE => shift 6
ExpAtom => goto 15

-----

State 6:

15 : ExpAtom -> CASE . LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> CASE . LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

LBRACKET => shift 16

-----

State 7:

19 : ExpApp -> IN . LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 5

LBRACKET => shift 17

-----

State 8:

17 : ExpApp -> ExpAtom .  / 5

$ => reduce 17
IDENT => reduce 17
LANGLE => reduce 17
RANGLE => reduce 17
LBRACE => reduce 17
RBRACE => reduce 17
LPAREN => reduce 17
RPAREN => reduce 17
BAR => reduce 17
COMMA => reduce 17
DOT => reduce 17
CASE => reduce 17

-----

State 9:

start -> Exp .  / 0

$ => accept

-----

State 10:

21 : ExpPost -> ExpPost . DOT Direction  / 11
22 : Exp -> ExpPost .  / 3

$ => reduce 22
RANGLE => reduce 22
LBRACE => reduce 22
RBRACE => reduce 22
RPAREN => reduce 22
BAR => reduce 22
COMMA => reduce 22
DOT => shift 18

-----

State 11:

23 : Exp -> FN LPAREN . IDENT COLON Typ RPAREN DARROW Exp  / 3

IDENT => shift 19

-----

State 12:

11 : ExpAtom -> LPAREN Exp . RPAREN  / 5

RPAREN => shift 20

-----

State 13:

13 : ExpAtom -> LANGLE RANGLE .  / 5

$ => reduce 13
IDENT => reduce 13
LANGLE => reduce 13
RANGLE => reduce 13
LBRACE => reduce 13
RBRACE => reduce 13
LPAREN => reduce 13
RPAREN => reduce 13
BAR => reduce 13
COMMA => reduce 13
DOT => reduce 13
CASE => reduce 13

-----

State 14:

14 : ExpAtom -> LANGLE Exp . COMMA Exp RANGLE  / 5

COMMA => shift 21

-----

State 15:

18 : ExpApp -> ExpApp ExpAtom .  / 5

$ => reduce 18
IDENT => reduce 18
LANGLE => reduce 18
RANGLE => reduce 18
LBRACE => reduce 18
RBRACE => reduce 18
LPAREN => reduce 18
RPAREN => reduce 18
BAR => reduce 18
COMMA => reduce 18
DOT => reduce 18
CASE => reduce 18

-----

State 16:

2 : Typ -> . LPAREN Typ RPAREN  / 12
3 : Typ -> . IDENT  / 12
4 : Typ -> . Typ ARROW Typ  / 12
5 : Typ -> . UNIT  / 12
6 : Typ -> . Typ STAR Typ  / 12
7 : Typ -> . VOID  / 12
8 : Typ -> . Typ PLUS Typ  / 12
15 : ExpAtom -> CASE LBRACKET . Typ RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> CASE LBRACKET . Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 22

-----

State 17:

0 : Direction -> . L  / 13
1 : Direction -> . R  / 13
19 : ExpApp -> IN LBRACKET . Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 5

L => shift 29
R => shift 28
Direction => goto 27

-----

State 18:

0 : Direction -> . L  / 11
1 : Direction -> . R  / 11
21 : ExpPost -> ExpPost DOT . Direction  / 11

L => shift 29
R => shift 28
Direction => goto 30

-----

State 19:

23 : Exp -> FN LPAREN IDENT . COLON Typ RPAREN DARROW Exp  / 3

COLON => shift 31

-----

State 20:

11 : ExpAtom -> LPAREN Exp RPAREN .  / 5

$ => reduce 11
IDENT => reduce 11
LANGLE => reduce 11
RANGLE => reduce 11
LBRACE => reduce 11
RBRACE => reduce 11
LPAREN => reduce 11
RPAREN => reduce 11
BAR => reduce 11
COMMA => reduce 11
DOT => reduce 11
CASE => reduce 11

-----

State 21:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 14
12 : ExpAtom -> . IDENT  / 14
13 : ExpAtom -> . LANGLE RANGLE  / 14
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 14
14 : ExpAtom -> LANGLE Exp COMMA . Exp RANGLE  / 5
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 14
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 14
17 : ExpApp -> . ExpAtom  / 14
18 : ExpApp -> . ExpApp ExpAtom  / 14
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 14
20 : ExpPost -> . ExpApp  / 15
21 : ExpPost -> . ExpPost DOT Direction  / 15
22 : Exp -> . ExpPost  / 16
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 16

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 32
ExpApp => goto 5
ExpPost => goto 10

-----

State 22:

4 : Typ -> Typ . ARROW Typ  / 12
6 : Typ -> Typ . STAR Typ  / 12
8 : Typ -> Typ . PLUS Typ  / 12
15 : ExpAtom -> CASE LBRACKET Typ . RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> CASE LBRACKET Typ . RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

RBRACKET => shift 33
ARROW => shift 34
PLUS => shift 35
STAR => shift 36

-----

State 23:

7 : Typ -> VOID .  / 17

RBRACE => reduce 7
RBRACKET => reduce 7
RPAREN => reduce 7
ARROW => reduce 7
COMMA => reduce 7
PLUS => reduce 7
STAR => reduce 7

-----

State 24:

5 : Typ -> UNIT .  / 17

RBRACE => reduce 5
RBRACKET => reduce 5
RPAREN => reduce 5
ARROW => reduce 5
COMMA => reduce 5
PLUS => reduce 5
STAR => reduce 5

-----

State 25:

2 : Typ -> . LPAREN Typ RPAREN  / 18
2 : Typ -> LPAREN . Typ RPAREN  / 17
3 : Typ -> . IDENT  / 18
4 : Typ -> . Typ ARROW Typ  / 18
5 : Typ -> . UNIT  / 18
6 : Typ -> . Typ STAR Typ  / 18
7 : Typ -> . VOID  / 18
8 : Typ -> . Typ PLUS Typ  / 18

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 37

-----

State 26:

3 : Typ -> IDENT .  / 17

RBRACE => reduce 3
RBRACKET => reduce 3
RPAREN => reduce 3
ARROW => reduce 3
COMMA => reduce 3
PLUS => reduce 3
STAR => reduce 3

-----

State 27:

19 : ExpApp -> IN LBRACKET Direction . RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 5

RBRACKET => shift 38

-----

State 28:

1 : Direction -> R .  / 19

$ => reduce 1
RANGLE => reduce 1
LBRACE => reduce 1
RBRACE => reduce 1
RBRACKET => reduce 1
RPAREN => reduce 1
BAR => reduce 1
COMMA => reduce 1
DOT => reduce 1

-----

State 29:

0 : Direction -> L .  / 19

$ => reduce 0
RANGLE => reduce 0
LBRACE => reduce 0
RBRACE => reduce 0
RBRACKET => reduce 0
RPAREN => reduce 0
BAR => reduce 0
COMMA => reduce 0
DOT => reduce 0

-----

State 30:

21 : ExpPost -> ExpPost DOT Direction .  / 11

$ => reduce 21
RANGLE => reduce 21
LBRACE => reduce 21
RBRACE => reduce 21
RPAREN => reduce 21
BAR => reduce 21
COMMA => reduce 21
DOT => reduce 21

-----

State 31:

2 : Typ -> . LPAREN Typ RPAREN  / 18
3 : Typ -> . IDENT  / 18
4 : Typ -> . Typ ARROW Typ  / 18
5 : Typ -> . UNIT  / 18
6 : Typ -> . Typ STAR Typ  / 18
7 : Typ -> . VOID  / 18
8 : Typ -> . Typ PLUS Typ  / 18
23 : Exp -> FN LPAREN IDENT COLON . Typ RPAREN DARROW Exp  / 3

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 39

-----

State 32:

14 : ExpAtom -> LANGLE Exp COMMA Exp . RANGLE  / 5

RANGLE => shift 40

-----

State 33:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 20
12 : ExpAtom -> . IDENT  / 20
13 : ExpAtom -> . LANGLE RANGLE  / 20
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 20
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 20
15 : ExpAtom -> CASE LBRACKET Typ RBRACKET . Exp LBRACE RBRACE  / 5
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 20
16 : ExpAtom -> CASE LBRACKET Typ RBRACKET . Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5
17 : ExpApp -> . ExpAtom  / 20
18 : ExpApp -> . ExpApp ExpAtom  / 20
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 20
20 : ExpPost -> . ExpApp  / 21
21 : ExpPost -> . ExpPost DOT Direction  / 21
22 : Exp -> . ExpPost  / 22
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 22

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 41
ExpApp => goto 5
ExpPost => goto 10

-----

State 34:

2 : Typ -> . LPAREN Typ RPAREN  / 17
3 : Typ -> . IDENT  / 17
4 : Typ -> . Typ ARROW Typ  / 17
4 : Typ -> Typ ARROW . Typ  / 17
5 : Typ -> . UNIT  / 17
6 : Typ -> . Typ STAR Typ  / 17
7 : Typ -> . VOID  / 17
8 : Typ -> . Typ PLUS Typ  / 17

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 42

-----

State 35:

2 : Typ -> . LPAREN Typ RPAREN  / 17
3 : Typ -> . IDENT  / 17
4 : Typ -> . Typ ARROW Typ  / 17
5 : Typ -> . UNIT  / 17
6 : Typ -> . Typ STAR Typ  / 17
7 : Typ -> . VOID  / 17
8 : Typ -> . Typ PLUS Typ  / 17
8 : Typ -> Typ PLUS . Typ  / 17

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 43

-----

State 36:

2 : Typ -> . LPAREN Typ RPAREN  / 17
3 : Typ -> . IDENT  / 17
4 : Typ -> . Typ ARROW Typ  / 17
5 : Typ -> . UNIT  / 17
6 : Typ -> . Typ STAR Typ  / 17
6 : Typ -> Typ STAR . Typ  / 17
7 : Typ -> . VOID  / 17
8 : Typ -> . Typ PLUS Typ  / 17

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 44

-----

State 37:

2 : Typ -> LPAREN Typ . RPAREN  / 17
4 : Typ -> Typ . ARROW Typ  / 18
6 : Typ -> Typ . STAR Typ  / 18
8 : Typ -> Typ . PLUS Typ  / 18

RPAREN => shift 45
ARROW => shift 34
PLUS => shift 35
STAR => shift 36

-----

State 38:

19 : ExpApp -> IN LBRACKET Direction RBRACKET . LBRACE Typ COMMA Typ RBRACE ExpAtom  / 5

LBRACE => shift 46

-----

State 39:

4 : Typ -> Typ . ARROW Typ  / 18
6 : Typ -> Typ . STAR Typ  / 18
8 : Typ -> Typ . PLUS Typ  / 18
23 : Exp -> FN LPAREN IDENT COLON Typ . RPAREN DARROW Exp  / 3

RPAREN => shift 47
ARROW => shift 34
PLUS => shift 35
STAR => shift 36

-----

State 40:

14 : ExpAtom -> LANGLE Exp COMMA Exp RANGLE .  / 5

$ => reduce 14
IDENT => reduce 14
LANGLE => reduce 14
RANGLE => reduce 14
LBRACE => reduce 14
RBRACE => reduce 14
LPAREN => reduce 14
RPAREN => reduce 14
BAR => reduce 14
COMMA => reduce 14
DOT => reduce 14
CASE => reduce 14

-----

State 41:

15 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp . LBRACE RBRACE  / 5
16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp . LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

LBRACE => shift 48

-----

State 42:

4 : Typ -> Typ . ARROW Typ  / 17
4 : Typ -> Typ ARROW Typ .  / 17
6 : Typ -> Typ . STAR Typ  / 17
8 : Typ -> Typ . PLUS Typ  / 17

RBRACE => reduce 4
RBRACKET => reduce 4
RPAREN => reduce 4
ARROW => shift 34, reduce 4  PRECEDENCE
COMMA => reduce 4
PLUS => shift 35, reduce 4  PRECEDENCE
STAR => shift 36, reduce 4  PRECEDENCE

-----

State 43:

4 : Typ -> Typ . ARROW Typ  / 17
6 : Typ -> Typ . STAR Typ  / 17
8 : Typ -> Typ . PLUS Typ  / 17
8 : Typ -> Typ PLUS Typ .  / 17

RBRACE => reduce 8
RBRACKET => reduce 8
RPAREN => reduce 8
ARROW => reduce 8, shift 34  PRECEDENCE
COMMA => reduce 8
PLUS => shift 35, reduce 8  PRECEDENCE
STAR => shift 36, reduce 8  PRECEDENCE

-----

State 44:

4 : Typ -> Typ . ARROW Typ  / 17
6 : Typ -> Typ . STAR Typ  / 17
6 : Typ -> Typ STAR Typ .  / 17
8 : Typ -> Typ . PLUS Typ  / 17

RBRACE => reduce 6
RBRACKET => reduce 6
RPAREN => reduce 6
ARROW => reduce 6, shift 34  PRECEDENCE
COMMA => reduce 6
PLUS => reduce 6, shift 35  PRECEDENCE
STAR => shift 36, reduce 6  PRECEDENCE

-----

State 45:

2 : Typ -> LPAREN Typ RPAREN .  / 17

RBRACE => reduce 2
RBRACKET => reduce 2
RPAREN => reduce 2
ARROW => reduce 2
COMMA => reduce 2
PLUS => reduce 2
STAR => reduce 2

-----

State 46:

2 : Typ -> . LPAREN Typ RPAREN  / 23
3 : Typ -> . IDENT  / 23
4 : Typ -> . Typ ARROW Typ  / 23
5 : Typ -> . UNIT  / 23
6 : Typ -> . Typ STAR Typ  / 23
7 : Typ -> . VOID  / 23
8 : Typ -> . Typ PLUS Typ  / 23
19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE . Typ COMMA Typ RBRACE ExpAtom  / 5

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 49

-----

State 47:

23 : Exp -> FN LPAREN IDENT COLON Typ RPAREN . DARROW Exp  / 3

DARROW => shift 50

-----

State 48:

9 : BarOrNot -> .  / 24
10 : BarOrNot -> . BAR  / 24
15 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE . RBRACE  / 5
16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE . BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

RBRACE => shift 53
BAR => shift 52
L => reduce 9
BarOrNot => goto 51

-----

State 49:

4 : Typ -> Typ . ARROW Typ  / 23
6 : Typ -> Typ . STAR Typ  / 23
8 : Typ -> Typ . PLUS Typ  / 23
19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE Typ . COMMA Typ RBRACE ExpAtom  / 5

ARROW => shift 34
COMMA => shift 54
PLUS => shift 35
STAR => shift 36

-----

State 50:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 5
12 : ExpAtom -> . IDENT  / 5
13 : ExpAtom -> . LANGLE RANGLE  / 5
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 5
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5
17 : ExpApp -> . ExpAtom  / 5
18 : ExpApp -> . ExpApp ExpAtom  / 5
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 5
20 : ExpPost -> . ExpApp  / 11
21 : ExpPost -> . ExpPost DOT Direction  / 11
22 : Exp -> . ExpPost  / 3
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 3
23 : Exp -> FN LPAREN IDENT COLON Typ RPAREN DARROW . Exp  / 3

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 55
ExpApp => goto 5
ExpPost => goto 10

-----

State 51:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot . L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

L => shift 56

-----

State 52:

10 : BarOrNot -> BAR .  / 24

L => reduce 10

-----

State 53:

15 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE .  / 5

$ => reduce 15
IDENT => reduce 15
LANGLE => reduce 15
RANGLE => reduce 15
LBRACE => reduce 15
RBRACE => reduce 15
LPAREN => reduce 15
RPAREN => reduce 15
BAR => reduce 15
COMMA => reduce 15
DOT => reduce 15
CASE => reduce 15

-----

State 54:

2 : Typ -> . LPAREN Typ RPAREN  / 25
3 : Typ -> . IDENT  / 25
4 : Typ -> . Typ ARROW Typ  / 25
5 : Typ -> . UNIT  / 25
6 : Typ -> . Typ STAR Typ  / 25
7 : Typ -> . VOID  / 25
8 : Typ -> . Typ PLUS Typ  / 25
19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE Typ COMMA . Typ RBRACE ExpAtom  / 5

IDENT => shift 26
LPAREN => shift 25
UNIT => shift 24
VOID => shift 23
Typ => goto 57

-----

State 55:

23 : Exp -> FN LPAREN IDENT COLON Typ RPAREN DARROW Exp .  / 3

$ => reduce 23
RANGLE => reduce 23
LBRACE => reduce 23
RBRACE => reduce 23
RPAREN => reduce 23
BAR => reduce 23
COMMA => reduce 23

-----

State 56:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L . DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

DOT => shift 58

-----

State 57:

4 : Typ -> Typ . ARROW Typ  / 25
6 : Typ -> Typ . STAR Typ  / 25
8 : Typ -> Typ . PLUS Typ  / 25
19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ . RBRACE ExpAtom  / 5

RBRACE => shift 59
ARROW => shift 34
PLUS => shift 35
STAR => shift 36

-----

State 58:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT . IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

IDENT => shift 60

-----

State 59:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 5
12 : ExpAtom -> . IDENT  / 5
13 : ExpAtom -> . LANGLE RANGLE  / 5
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 5
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 5
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5
19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE . ExpAtom  / 5

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
CASE => shift 6
ExpAtom => goto 61

-----

State 60:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT . DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5

DARROW => shift 62

-----

State 61:

19 : ExpApp -> IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom .  / 5

$ => reduce 19
IDENT => reduce 19
LANGLE => reduce 19
RANGLE => reduce 19
LBRACE => reduce 19
RBRACE => reduce 19
LPAREN => reduce 19
RPAREN => reduce 19
BAR => reduce 19
COMMA => reduce 19
DOT => reduce 19
CASE => reduce 19

-----

State 62:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 26
12 : ExpAtom -> . IDENT  / 26
13 : ExpAtom -> . LANGLE RANGLE  / 26
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 26
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 26
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 26
16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW . Exp BAR R DOT IDENT DARROW Exp RBRACE  / 5
17 : ExpApp -> . ExpAtom  / 26
18 : ExpApp -> . ExpApp ExpAtom  / 26
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 26
20 : ExpPost -> . ExpApp  / 27
21 : ExpPost -> . ExpPost DOT Direction  / 27
22 : Exp -> . ExpPost  / 28
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 28

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 63
ExpApp => goto 5
ExpPost => goto 10

-----

State 63:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp . BAR R DOT IDENT DARROW Exp RBRACE  / 5

BAR => shift 64

-----

State 64:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR . R DOT IDENT DARROW Exp RBRACE  / 5

R => shift 65

-----

State 65:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R . DOT IDENT DARROW Exp RBRACE  / 5

DOT => shift 66

-----

State 66:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT . IDENT DARROW Exp RBRACE  / 5

IDENT => shift 67

-----

State 67:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT . DARROW Exp RBRACE  / 5

DARROW => shift 68

-----

State 68:

11 : ExpAtom -> . LPAREN Exp RPAREN  / 29
12 : ExpAtom -> . IDENT  / 29
13 : ExpAtom -> . LANGLE RANGLE  / 29
14 : ExpAtom -> . LANGLE Exp COMMA Exp RANGLE  / 29
15 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE RBRACE  / 29
16 : ExpAtom -> . CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE  / 29
16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW . Exp RBRACE  / 5
17 : ExpApp -> . ExpAtom  / 29
18 : ExpApp -> . ExpApp ExpAtom  / 29
19 : ExpApp -> . IN LBRACKET Direction RBRACKET LBRACE Typ COMMA Typ RBRACE ExpAtom  / 29
20 : ExpPost -> . ExpApp  / 30
21 : ExpPost -> . ExpPost DOT Direction  / 30
22 : Exp -> . ExpPost  / 31
23 : Exp -> . FN LPAREN IDENT COLON Typ RPAREN DARROW Exp  / 31

IDENT => shift 4
LANGLE => shift 3
LPAREN => shift 2
FN => shift 1
CASE => shift 6
IN => shift 7
ExpAtom => goto 8
Exp => goto 69
ExpApp => goto 5
ExpPost => goto 10

-----

State 69:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp . RBRACE  / 5

RBRACE => shift 70

-----

State 70:

16 : ExpAtom -> CASE LBRACKET Typ RBRACKET Exp LBRACE BarOrNot L DOT IDENT DARROW Exp BAR R DOT IDENT DARROW Exp RBRACE .  / 5

$ => reduce 16
IDENT => reduce 16
LANGLE => reduce 16
RANGLE => reduce 16
LBRACE => reduce 16
RBRACE => reduce 16
LPAREN => reduce 16
RPAREN => reduce 16
BAR => reduce 16
COMMA => reduce 16
DOT => reduce 16
CASE => reduce 16

-----

lookahead 0 = $
lookahead 1 = $ IDENT LANGLE LPAREN DOT CASE
lookahead 2 = $ DOT
lookahead 3 = $ RANGLE LBRACE RBRACE RPAREN BAR COMMA
lookahead 4 = IDENT LANGLE LPAREN RPAREN DOT CASE
lookahead 5 = $ IDENT LANGLE RANGLE LBRACE RBRACE LPAREN RPAREN BAR COMMA DOT CASE
lookahead 6 = RPAREN DOT
lookahead 7 = RPAREN
lookahead 8 = IDENT LANGLE LPAREN COMMA DOT CASE
lookahead 9 = COMMA DOT
lookahead 10 = COMMA
lookahead 11 = $ RANGLE LBRACE RBRACE RPAREN BAR COMMA DOT
lookahead 12 = RBRACKET ARROW PLUS STAR
lookahead 13 = RBRACKET
lookahead 14 = IDENT LANGLE RANGLE LPAREN DOT CASE
lookahead 15 = RANGLE DOT
lookahead 16 = RANGLE
lookahead 17 = RBRACE RBRACKET RPAREN ARROW COMMA PLUS STAR
lookahead 18 = RPAREN ARROW PLUS STAR
lookahead 19 = $ RANGLE LBRACE RBRACE RBRACKET RPAREN BAR COMMA DOT
lookahead 20 = IDENT LANGLE LBRACE LPAREN DOT CASE
lookahead 21 = LBRACE DOT
lookahead 22 = LBRACE
lookahead 23 = ARROW COMMA PLUS STAR
lookahead 24 = L
lookahead 25 = RBRACE ARROW PLUS STAR
lookahead 26 = IDENT LANGLE LPAREN BAR DOT CASE
lookahead 27 = BAR DOT
lookahead 28 = BAR
lookahead 29 = IDENT LANGLE RBRACE LPAREN DOT CASE
lookahead 30 = RBRACE DOT
lookahead 31 = RBRACE

*)

struct
  local
    structure Value =
    struct
      datatype nonterminal =
        nonterminal
      | string of Arg.string
      | dir of Arg.dir
      | typ of Arg.typ
      | unittp of Arg.unittp
      | exp of Arg.exp
    end
    structure ParseEngine =
      ParseEngineFun
        (structure Streamable = Streamable
         type terminal = Arg.terminal
         type value = Value.nonterminal
         val dummy = Value.nonterminal
         fun read terminal =
           (case terminal of
              Arg.IDENT x => (1, Value.string x)
            | Arg.STRING x => (2, Value.string x)
            | Arg.LANGLE => (3, Value.nonterminal)
            | Arg.RANGLE => (4, Value.nonterminal)
            | Arg.LBRACE => (5, Value.nonterminal)
            | Arg.RBRACE => (6, Value.nonterminal)
            | Arg.LBRACKET => (7, Value.nonterminal)
            | Arg.RBRACKET => (8, Value.nonterminal)
            | Arg.LPAREN => (9, Value.nonterminal)
            | Arg.RPAREN => (10, Value.nonterminal)
            | Arg.ARROW => (11, Value.nonterminal)
            | Arg.BAR => (12, Value.nonterminal)
            | Arg.COLON => (13, Value.nonterminal)
            | Arg.COMMA => (14, Value.nonterminal)
            | Arg.DARROW => (15, Value.nonterminal)
            | Arg.DOT => (16, Value.nonterminal)
            | Arg.EQUAL => (17, Value.nonterminal)
            | Arg.PLUS => (18, Value.nonterminal)
            | Arg.STAR => (19, Value.nonterminal)
            | Arg.SEMICOLON => (20, Value.nonterminal)
            | Arg.UNIT => (21, Value.nonterminal)
            | Arg.VOID => (22, Value.nonterminal)
            | Arg.FN => (23, Value.nonterminal)
            | Arg.CASE => (24, Value.nonterminal)
            | Arg.IN => (25, Value.nonterminal)
            | Arg.L => (26, Value.nonterminal)
            | Arg.R => (27, Value.nonterminal)))
  in
    val parse = ParseEngine.parse
      ( ParseEngine.next5x1
rr\128rrrr\128\128rr\128r\128r\128r\128\128\128\128\128\128\128r\128\128\128\128\128\128\128j\133\128\132jjj\128\128\131j\128j\128j\128j\128\128\128\128\128\128\128\135\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\146\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128mm\128mmmm\128\128mm\128m\128m\128m\128\128\128\128\128\128\128m\128\128\128\128\128\128\128\127\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128h\128\128\128hhh\128\128\128h\128h\128h\128\147\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\148\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\149\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128qq\128qqqq\128\128qq\128q\128q\128q\128\128\128\128\128\128\128q\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\150\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ll\128llll\128\128ll\128l\128l\128l\128\128\128\128\128\128\128l\128\128\128\128\128\128\128\128\155\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\158\157\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\158\157\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\160\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ss\128ssss\128\128ss\128s\128s\128s\128\128\128\128\128\128\128s\128\128\128\128\128\128\128\128\133\128\132\128\128\128\128\128\131\128\128\128\128\128\128\128\128\128\128\128\128\128\130\135\136\128\128\128\128\128\128\128\128\128\128\128\128\128\128\162\128\128\163\128\128\128\128\128\128\164\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128w\128w\128ww\128\128w\128\128\128ww\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128y\128y\128yy\128\128y\128\128\128yy\128\128\128\128\128\128\128\128\128\128\128\128\128\155\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{\128{\128{{\128\128{\128\128\128{{\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\167\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128}\128\128\128}}}\128}\128}\128}\128}\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128~\128\128\128~~~\128~\128~\128~\128~\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128i\128\128\128iii\128\128\128i\128i\128i\128ipp\128pppp\128\128pp\128p\128p\128p\128\128\128\128\128\128\128p\128\128\128\128\128\128\128\128\128\128\128\128\177\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128z\128z\163\128\128z\128\128\128\164\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128v\128v\128vv\128\128v\128\128\128\164\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128x\128xx\128\128x\128\128\128x\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|\128|\128||\128\128|\128\128\128||\128\128\128\128\128\128\128\128\128\128\128\128\128\155\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\179\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\182\128\128\128\128\128\181\128\128\128\128\128\128\128\128\128\128\128\128\128ut\128\128\128\128\128oo\128oooo\128\128oo\128o\128o\128o\128\128\128\128\128\128\128o\128\128\128\128\128\128\128\128\155\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128g\128\128\128ggg\128\128\128g\128g\128gkk\128kkkk\128\128kk\128k\128k\128k\128\128\128\128\128\128\128knn\128nnnn\128\128nn\128n\128n\128n\128\128\128\128\128\128\128n\128\128\128\128\128\128\128"
      , ParseEngine.next5x1

      , Vector.fromList
          [ ( 0
            , 1
            , (fn _ :: rest => Value.dir (Arg.dir_l {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 0
            , 1
            , (fn _ :: rest => Value.dir (Arg.dir_r {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn _ :: Value.typ (arg0) :: _ :: rest =>
                 Value.typ (Arg.typ_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 1
            , (fn Value.string (arg0) :: rest =>
                 Value.typ (Arg.typ_var arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn Value.typ (arg0) :: _ :: Value.typ (arg1) :: rest =>
                 Value.typ (Arg.typ_arrow {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 1
            , (fn _ :: rest => Value.typ (Arg.typ_unit {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn Value.typ (arg0) :: _ :: Value.typ (arg1) :: rest =>
                 Value.typ (Arg.typ_prod {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 1
            , (fn _ :: rest => Value.typ (Arg.typ_void {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 1
            , 3
            , (fn Value.typ (arg0) :: _ :: Value.typ (arg1) :: rest =>
                 Value.typ (Arg.typ_sum {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , (2, 0, (fn rest => Value.unittp (Arg.unittm {}) :: rest))
          , ( 2
            , 1
            , (fn _ :: rest => Value.unittp (Arg.unittm {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 3
            , (fn _ :: Value.exp (arg0) :: _ :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 1
            , (fn Value.string (arg0) :: rest =>
                 Value.exp (Arg.exp_var arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 2
            , (fn _ :: _ :: rest => Value.exp (Arg.exp_triv {}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 5
            , (fn _ :: Value.exp (arg0) :: _ :: Value.exp (arg1) :: _ :: rest =>
                 Value.exp (Arg.exp_pair {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 7
            , (fn _ ::
                   _ ::
                     Value.exp (arg0) :: _ :: Value.typ (arg1) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_abort {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 3
            , 19
            , (fn _ ::
                   Value.exp (arg0) ::
                     _ ::
                       Value.string (arg1) ::
                         _ ::
                           _ ::
                             _ ::
                               Value.exp (arg2) ::
                                 _ ::
                                   Value.string (arg3) ::
                                     _ ::
                                       _ ::
                                         _ ::
                                           _ ::
                                             Value.exp (arg4) ::
                                               _ ::
                                                 Value.typ (arg5) ::
                                                   _ :: _ :: rest =>
                 Value.exp (Arg.exp_case
                   {6 = arg0, 5 = arg1, 4 = arg2, 3 = arg3, 2 = arg4, 1 = arg5})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 2
            , (fn Value.exp (arg0) :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_ap {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 5
            , 10
            , (fn Value.exp (arg0) ::
                   _ ::
                     Value.typ (arg1) ::
                       _ ::
                         Value.typ (arg2) ::
                           _ :: _ :: Value.dir (arg3) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_in {4 = arg0, 3 = arg1, 2 = arg2, 1 = arg3})
                 :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 6
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 6
            , 3
            , (fn Value.dir (arg0) :: _ :: Value.exp (arg1) :: rest =>
                 Value.exp (Arg.exp_pr {2 = arg0, 1 = arg1}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 4
            , 1
            , (fn Value.exp (arg0) :: rest =>
                 Value.exp (Arg.exp_id arg0) :: rest
                | _ => raise (Fail "bad parser"))
            )
          , ( 4
            , 8
            , (fn Value.exp (arg0) ::
                   _ ::
                     _ ::
                       Value.typ (arg1) ::
                         _ :: Value.string (arg2) :: _ :: _ :: rest =>
                 Value.exp (Arg.exp_lam {3 = arg0, 2 = arg1, 1 = arg2}) :: rest
                | _ => raise (Fail "bad parser"))
            )
          ]
      , (fn Value.exp x => x | _ => raise (Fail "bad parser"))
      , Arg.error
      )
  end
end
